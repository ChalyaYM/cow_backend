diff --git a/server/docs/docs.go b/server/docs/docs.go
index 48aa730..4758de3 100644
--- a/server/docs/docs.go
+++ b/server/docs/docs.go
@@ -656,6 +656,114 @@ const docTemplate = `{
                 }
             }
         },
+        "/analitics/total/farm/{farm_id}": {
+            "get": {
+                "description": "Еще не придумал что возвращает",
+                "produces": [
+                    "application/json"
+                ],
+                "tags": [
+                    "NEW_ANALITICS"
+                ],
+                "summary": "Get statistics for region",
+                "parameters": [
+                    {
+                        "type": "integer",
+                        "description": "холдинг/хозяйство по которому собиается статистика",
+                        "name": "farm_id",
+                        "in": "path",
+                        "required": true
+                    }
+                ],
+                "responses": {
+                    "200": {
+                        "description": "OK",
+                        "schema": {
+                            "$ref": "#/definitions/analitics.RegionalResponse"
+                        }
+                    },
+                    "422": {
+                        "description": "Unprocessable Entity",
+                        "schema": {
+                            "type": "string"
+                        }
+                    }
+                }
+            }
+        },
+        "/analitics/total/region/{region_id}": {
+            "get": {
+                "description": "Еще не придумал что возвращает",
+                "produces": [
+                    "application/json"
+                ],
+                "tags": [
+                    "NEW_ANALITICS"
+                ],
+                "summary": "Get statistics for region",
+                "parameters": [
+                    {
+                        "type": "integer",
+                        "description": "регион по которому собиается статистика",
+                        "name": "region_id",
+                        "in": "path",
+                        "required": true
+                    }
+                ],
+                "responses": {
+                    "200": {
+                        "description": "OK",
+                        "schema": {
+                            "$ref": "#/definitions/analitics.RegionalResponse"
+                        }
+                    },
+                    "422": {
+                        "description": "Unprocessable Entity",
+                        "schema": {
+                            "type": "string"
+                        }
+                    }
+                }
+            }
+        },
+        "/analitics/total/{region_id}/regionalStatistics": {
+            "get": {
+                "description": "Еще не придумал что возвращает",
+                "produces": [
+                    "application/json"
+                ],
+                "tags": [
+                    "NEW_ANALITICS"
+                ],
+                "summary": "Get statistics for region",
+                "parameters": [
+                    {
+                        "type": "integer",
+                        "description": "регион по которому собиается статистика",
+                        "name": "region_id",
+                        "in": "path",
+                        "required": true
+                    }
+                ],
+                "responses": {
+                    "200": {
+                        "description": "OK",
+                        "schema": {
+                            "type": "array",
+                            "items": {
+                                "$ref": "#/definitions/analitics.RegionalResponse"
+                            }
+                        }
+                    },
+                    "422": {
+                        "description": "Unprocessable Entity",
+                        "schema": {
+                            "type": "string"
+                        }
+                    }
+                }
+            }
+        },
         "/auth/checkEmail": {
             "get": {
                 "consumes": [
@@ -1319,7 +1427,7 @@ const docTemplate = `{
         },
         "/cows/{id}/grades": {
             "get": {
-                "description": "Возращает словарь с двумя ключам \"ByRegion\" - оценки по региону и \"ByHoz\" - оценки по хозяйству",
+                "description": "Возращает словарь с ключами:\n1. ByRegion - Значения оценок EBV по региону\n2. ByHoz - Значения оценок EBV по хозяйству\n3. ByCountry - Значения оценок EBV по стране\n4. Average - Средние значения оценок EBV\n5. PercentsRegion - Отклонение оценок от среднего значения для региона",
                 "produces": [
                     "application/json"
                 ],
@@ -1560,6 +1668,7 @@ const docTemplate = `{
                     "Farms"
                 ],
                 "summary": "Get list of farms",
+                "deprecated": true,
                 "parameters": [
                     {
                         "type": "object",
@@ -1593,6 +1702,93 @@ const docTemplate = `{
                 }
             }
         },
+        "/farms/farm": {
+            "get": {
+                "description": "Возвращает список всех ферм",
+                "produces": [
+                    "application/json"
+                ],
+                "tags": [
+                    "Farms"
+                ],
+                "summary": "Get list of Farms",
+                "responses": {
+                    "200": {
+                        "description": "OK",
+                        "schema": {
+                            "type": "array",
+                            "items": {
+                                "$ref": "#/definitions/models.Farm"
+                            }
+                        }
+                    },
+                    "500": {
+                        "description": "Internal Server Error",
+                        "schema": {
+                            "type": "string"
+                        }
+                    }
+                }
+            }
+        },
+        "/farms/hold": {
+            "get": {
+                "description": "Возвращает список всех холдингов",
+                "produces": [
+                    "application/json"
+                ],
+                "tags": [
+                    "Farms"
+                ],
+                "summary": "Get list of holdings",
+                "responses": {
+                    "200": {
+                        "description": "OK",
+                        "schema": {
+                            "type": "array",
+                            "items": {
+                                "$ref": "#/definitions/models.Farm"
+                            }
+                        }
+                    },
+                    "500": {
+                        "description": "Internal Server Error",
+                        "schema": {
+                            "type": "string"
+                        }
+                    }
+                }
+            }
+        },
+        "/farms/hoz": {
+            "get": {
+                "description": "Возвращает список всех хозяйств",
+                "produces": [
+                    "application/json"
+                ],
+                "tags": [
+                    "Farms"
+                ],
+                "summary": "Get list of Hoz",
+                "responses": {
+                    "200": {
+                        "description": "OK",
+                        "schema": {
+                            "type": "array",
+                            "items": {
+                                "$ref": "#/definitions/models.Farm"
+                            }
+                        }
+                    },
+                    "500": {
+                        "description": "Internal Server Error",
+                        "schema": {
+                            "type": "string"
+                        }
+                    }
+                }
+            }
+        },
         "/farms/{id}": {
             "get": {
                 "description": "Возращает конкретную ферму (хозяйство, холдинг)",
@@ -1816,7 +2012,7 @@ const docTemplate = `{
                     "application/json"
                 ],
                 "tags": [
-                    "Regions"
+                    "zzDeprecated"
                 ],
                 "summary": "Get farm by region id",
                 "parameters": [
@@ -2007,9 +2203,108 @@ const docTemplate = `{
                 "summary": "Get list of sexes",
                 "responses": {}
             }
+        },
+        "/user/whoami": {
+            "get": {
+                "description": "Рут вернет данные о пользователе из БД",
+                "produces": [
+                    "application/json"
+                ],
+                "tags": [
+                    "User"
+                ],
+                "summary": "Получить информацию о пользователе",
+                "responses": {
+                    "200": {
+                        "description": "OK",
+                        "schema": {
+                            "type": "string"
+                        }
+                    },
+                    "401": {
+                        "description": "Unauthorized",
+                        "schema": {
+                            "type": "string"
+                        }
+                    },
+                    "500": {
+                        "description": "Internal Server Error",
+                        "schema": {
+                            "type": "string"
+                        }
+                    }
+                }
+            }
         }
     },
     "definitions": {
+        "analitics.RegionalResponse": {
+            "type": "object",
+            "properties": {
+                "avgCount": {
+                    "description": "Количество коров с минимальным индексом",
+                    "type": "integer"
+                },
+                "avgCowIds": {
+                    "description": "ID коров с средним значением индекса",
+                    "type": "array",
+                    "items": {
+                        "type": "number"
+                    }
+                },
+                "avgIndex": {
+                    "description": "Значение среднего индекса",
+                    "type": "number"
+                },
+                "farm": {
+                    "$ref": "#/definitions/models.Farm"
+                },
+                "farmID": {
+                    "description": "не null, если статистика собрана по холдингу или хозяйству",
+                    "type": "integer"
+                },
+                "id": {
+                    "type": "integer"
+                },
+                "maxCount": {
+                    "description": "Количество коров с максимальным индексом",
+                    "type": "integer"
+                },
+                "maxCowIds": {
+                    "description": "ID коров с максимальным значением индекса",
+                    "type": "array",
+                    "items": {
+                        "type": "number"
+                    }
+                },
+                "maxIndex": {
+                    "description": "Значение максимального индекса",
+                    "type": "number"
+                },
+                "minCount": {
+                    "description": "Количество коров с минимальным индексом",
+                    "type": "integer"
+                },
+                "minCowIds": {
+                    "description": "ID коров с минимальным значением индекса",
+                    "type": "array",
+                    "items": {
+                        "type": "number"
+                    }
+                },
+                "minIndex": {
+                    "description": "Значение минимального индекса",
+                    "type": "number"
+                },
+                "region": {
+                    "$ref": "#/definitions/models.Region"
+                },
+                "regionID": {
+                    "description": "не null, если статистика собрана по региону",
+                    "type": "integer"
+                }
+            }
+        },
         "analitics.byDistrictStatistics": {
             "type": "object",
             "properties": {
@@ -2305,6 +2600,10 @@ const docTemplate = `{
                         }
                     ]
                 },
+                "ebvGeneralValueRegion": {
+                    "description": "Общая оценка EBV по региону",
+                    "type": "number"
+                },
                 "events": {
                     "description": "Вет события",
                     "type": "array",
@@ -2412,7 +2711,7 @@ const docTemplate = `{
             "type": "object",
             "properties": {
                 "checkDate": {
-                    "description": "Дата конрольной дойки",
+                    "description": "Дата контрольной дойки",
                     "allOf": [
                         {
                             "$ref": "#/definitions/models.DateOnly"
@@ -2420,7 +2719,7 @@ const docTemplate = `{
                     ]
                 },
                 "dryMatter": {
-                    "description": "сухой материал",
+                    "description": "Сухой материал",
                     "type": "number"
                 },
                 "fat": {
@@ -2452,7 +2751,7 @@ const docTemplate = `{
                     "type": "integer"
                 },
                 "probeNumber": {
-                    "description": "номер пробы",
+                    "description": "Номер пробы",
                     "type": "integer"
                 },
                 "protein": {
@@ -2461,7 +2760,7 @@ const docTemplate = `{
                     "example": 1
                 },
                 "somaticNucCount": {
-                    "description": "количество соматических клеток",
+                    "description": "Количество соматических клеток",
                     "type": "number"
                 }
             }
@@ -2495,7 +2794,7 @@ const docTemplate = `{
                     "type": "integer"
                 },
                 "birthMethod": {
-                    "description": "способ зачатия: клон, эмбрион, искусственное осеменени, естественное осеменение",
+                    "description": "Способ зачатия: клон, эмбрион, искусственное осеменени, естественное осеменение",
                     "type": "string"
                 },
                 "breedId": {
@@ -2560,16 +2859,6 @@ const docTemplate = `{
                 "genetic": {
                     "$ref": "#/definitions/models.Genetic"
                 },
-                "gradeHozId": {
-                    "description": "оценка по хозяйству",
-                    "type": "integer",
-                    "example": 1
-                },
-                "gradeRegionId": {
-                    "description": "оценка по региону",
-                    "type": "integer",
-                    "example": 1
-                },
                 "holding": {
                     "$ref": "#/definitions/models.Farm"
                 },
@@ -2587,7 +2876,7 @@ const docTemplate = `{
                     "example": 1
                 },
                 "identificationNumber": {
-                    "description": "он все-таки есть! это какой-то не российский номер коровы",
+                    "description": "Он все-таки есть! Это какой-то не российский номер коровы",
                     "type": "string"
                 },
                 "inbrindingCoeffByFamily": {
@@ -2710,6 +2999,14 @@ const docTemplate = `{
                     "type": "string",
                     "example": "2800-01-21"
                 },
+                "ebvGeneralValueRegionFrom": {
+                    "type": "number",
+                    "example": 3.14
+                },
+                "ebvGeneralValueRegionTo": {
+                    "type": "number",
+                    "example": 3.14
+                },
                 "entitiesOnPage": {
                     "description": "Количество сущностей на странице",
                     "type": "integer",
@@ -2775,6 +3072,13 @@ const docTemplate = `{
                     "type": "number",
                     "default": 3.14
                 },
+                "includeOnly": {
+                    "description": "ID коров, которые могут быть в выдаче фильтра. Пустой = ВСЕ коровы",
+                    "type": "array",
+                    "items": {
+                        "type": "integer"
+                    }
+                },
                 "inseminationDateFrom": {
                     "description": "Exterior             *float64 ` + "`" + `default:\"3.14\" validate:\"optional\"` + "`" + `       // Фильтр по оценке экстерьера коровы, будет переработан",
                     "type": "string",
@@ -2822,7 +3126,7 @@ const docTemplate = `{
                     }
                 },
                 "orderBy": {
-                    "description": "Может принимать следующие и только следующие значения: null, \"RSHN\", \"InventoryNumber\", \"Name\", \"HozName\", \"BirthDate\"",
+                    "description": "Может принимать следующие и только следующие значения: null, \"RSHN\", \"InventoryNumber\", \"Name\", \"HozName\", \"BirthDate\", \"GeneralEbvRegion\"",
                     "type": "string"
                 },
                 "orderByDesc": {
@@ -2852,6 +3156,35 @@ const docTemplate = `{
                 }
             }
         },
+        "models.AdditionalInfo": {
+            "type": "object",
+            "properties": {
+                "additionalProperty1Measure": {
+                    "description": "Дополнительный параметр 1 (значение в единицах измерения)",
+                    "type": "string"
+                },
+                "additionalProperty1Name": {
+                    "description": "Дополнительный параметр 1 (название)",
+                    "type": "string"
+                },
+                "additionalProperty1Value": {
+                    "description": "Дополнительный параметр 1 (значение в баллах)",
+                    "type": "string"
+                },
+                "additionalProperty2Measure": {
+                    "description": "Дополнительный параметр 2 (значение в единицах измерения)",
+                    "type": "string"
+                },
+                "additionalProperty2Name": {
+                    "description": "Дополнительный параметр 2 (название)",
+                    "type": "string"
+                },
+                "additionalProperty2Value": {
+                    "description": "Дополнительный параметр 2 (значение в баллах)",
+                    "type": "string"
+                }
+            }
+        },
         "models.Breed": {
             "type": "object",
             "properties": {
@@ -2871,7 +3204,7 @@ const docTemplate = `{
             "type": "object",
             "properties": {
                 "checkDate": {
-                    "description": "Дата конрольной дойки",
+                    "description": "Дата контрольной дойки",
                     "allOf": [
                         {
                             "$ref": "#/definitions/models.DateOnly"
@@ -2879,7 +3212,7 @@ const docTemplate = `{
                     ]
                 },
                 "dryMatter": {
-                    "description": "сухой материал",
+                    "description": "Сухой материал",
                     "type": "number"
                 },
                 "fat": {
@@ -2903,7 +3236,7 @@ const docTemplate = `{
                     "example": 1
                 },
                 "probeNumber": {
-                    "description": "номер пробы",
+                    "description": "Номер пробы",
                     "type": "integer"
                 },
                 "protein": {
@@ -2912,7 +3245,7 @@ const docTemplate = `{
                     "example": 1
                 },
                 "somaticNucCount": {
-                    "description": "количество соматических клеток",
+                    "description": "Количество соматических клеток",
                     "type": "number"
                 }
             }
@@ -2946,7 +3279,7 @@ const docTemplate = `{
                     "type": "integer"
                 },
                 "birthMethod": {
-                    "description": "способ зачатия: клон, эмбрион, искусственное осеменени, естественное осеменение",
+                    "description": "Способ зачатия: клон, эмбрион, искусственное осеменени, естественное осеменение",
                     "type": "string"
                 },
                 "breedId": {
@@ -2995,16 +3328,6 @@ const docTemplate = `{
                 "genetic": {
                     "$ref": "#/definitions/models.Genetic"
                 },
-                "gradeHozId": {
-                    "description": "оценка по хозяйству",
-                    "type": "integer",
-                    "example": 1
-                },
-                "gradeRegionId": {
-                    "description": "оценка по региону",
-                    "type": "integer",
-                    "example": 1
-                },
                 "holding": {
                     "$ref": "#/definitions/models.Farm"
                 },
@@ -3018,7 +3341,7 @@ const docTemplate = `{
                     "example": 1
                 },
                 "identificationNumber": {
-                    "description": "он все-таки есть! это какой-то не российский номер коровы",
+                    "description": "Он все-таки есть! Это какой-то не российский номер коровы",
                     "type": "string"
                 },
                 "inbrindingCoeffByFamily": {
@@ -3149,7 +3472,56 @@ const docTemplate = `{
                     "type": "integer"
                 },
                 "path": {
-                    "description": "путь к документу относительно genmilk.ru/api/static/documents",
+                    "description": "Путь к документу относительно genmilk.ru/api/static/documents",
+                    "type": "string"
+                }
+            }
+        },
+        "models.DownSides": {
+            "type": "object",
+            "properties": {
+                "bodyCount": {
+                    "description": "Туловище",
+                    "type": "number"
+                },
+                "bodyDescription": {
+                    "description": "Список недостатков туловища разделитель: \"/\"",
+                    "type": "string"
+                },
+                "limbsCount": {
+                    "description": "Конечности",
+                    "type": "number"
+                },
+                "limbsDescription": {
+                    "description": "Список недостатков конечностей разделитель: \"/\"",
+                    "type": "string"
+                },
+                "milkTypeCount": {
+                    "description": "Молочный тип",
+                    "type": "number"
+                },
+                "milkTypeDescription": {
+                    "description": "Список недостатков Молочного типа. Разделитель: \"/\"",
+                    "type": "string"
+                },
+                "sacrumCount": {
+                    "description": "Крестец",
+                    "type": "number"
+                },
+                "sacrumDescription": {
+                    "description": "Список недостатков крестца разделитель: \"/\"",
+                    "type": "string"
+                },
+                "summary": {
+                    "description": "Сводные данные о недостатках разделитель \"/\"",
+                    "type": "string"
+                },
+                "udderCount": {
+                    "description": "Вымя",
+                    "type": "number"
+                },
+                "udderDescription": {
+                    "description": "Список недостатков вымени разделитель: \"/\"",
                     "type": "string"
                 }
             }
@@ -3158,11 +3530,11 @@ const docTemplate = `{
             "type": "object",
             "properties": {
                 "comment1": {
-                    "description": "Коментарий 1 (по всей видиости сюда что-то пришет врач)",
+                    "description": "Комментарий 1 (по всей видимости сюда что-то пришит врач)",
                     "type": "string"
                 },
                 "comment2": {
-                    "description": "Коментарий 2",
+                    "description": "Комментарий 2",
                     "type": "string"
                 },
                 "cowId": {
@@ -3170,7 +3542,7 @@ const docTemplate = `{
                     "type": "integer"
                 },
                 "dataResourse": {
-                    "description": "источник данных",
+                    "description": "Источник данных",
                     "type": "string"
                 },
                 "date": {
@@ -3182,7 +3554,7 @@ const docTemplate = `{
                     ]
                 },
                 "daysFromLactation": {
-                    "description": "дни от начала лактации",
+                    "description": "Дни от начала лактации",
                     "type": "integer"
                 },
                 "eventType": {
@@ -3192,18 +3564,18 @@ const docTemplate = `{
                     "$ref": "#/definitions/models.EventType"
                 },
                 "eventType1Id": {
-                    "description": "стандартизированная название события",
+                    "description": "Стандартизированная название события",
                     "type": "integer"
                 },
                 "eventType2": {
                     "$ref": "#/definitions/models.EventType"
                 },
                 "eventType2Id": {
-                    "description": "стандартизированное разновидность события",
+                    "description": "Стандартизированное разновидность события",
                     "type": "integer"
                 },
                 "eventTypeId": {
-                    "description": "стандартизированная группа события",
+                    "description": "Стандартизированная группа события",
                     "type": "integer"
                 },
                 "id": {
@@ -3215,7 +3587,7 @@ const docTemplate = `{
             "type": "object",
             "properties": {
                 "code": {
-                    "description": "код группы или разновидности или названия события",
+                    "description": "Код группы или разновидности или названия события",
                     "type": "integer"
                 },
                 "id": {
@@ -3239,114 +3611,186 @@ const docTemplate = `{
             "type": "object",
             "properties": {
                 "acrumLength": {
+                    "description": "Длина крестца (9 баллов)",
                     "type": "number"
                 },
+                "additionalInfo": {
+                    "description": "Доп. признаки",
+                    "allOf": [
+                        {
+                            "$ref": "#/definitions/models.AdditionalInfo"
+                        }
+                    ]
+                },
+                "assessmentDate": {
+                    "$ref": "#/definitions/models.DateOnly"
+                },
                 "bodyDepth": {
+                    "description": "Глубина туловища (9 баллов)",
                     "type": "number"
                 },
                 "bodyStructure": {
+                    "description": "Туловище (100 баллов)",
                     "type": "number"
                 },
                 "boneQHockJointRear": {
+                    "description": "Качество костяка (9 баллов)",
                     "type": "number"
                 },
                 "centerLigamentDepth": {
+                    "description": "Глубина центральной связки (9 баллов)",
                     "type": "number"
                 },
                 "chestWidth": {
+                    "description": "Ширина груди (9 баллов)",
                     "type": "number"
                 },
                 "conditioning": {
+                    "description": "Упитанность (9 баллов)",
                     "type": "number"
                 },
                 "cowID": {
                     "type": "integer"
                 },
+                "deceptions": {
+                    "description": "Обмускульность (9 баллов)",
+                    "type": "number"
+                },
+                "downSides": {
+                    "description": "Недостатки (пороки)",
+                    "allOf": [
+                        {
+                            "$ref": "#/definitions/models.DownSides"
+                        }
+                    ]
+                },
                 "exteriorType": {
+                    "description": "Тип телосложения (9 баллов)",
                     "type": "number"
                 },
                 "foreLegPosFront": {
+                    "description": "Постановка передних ног (9 баллов)",
                     "type": "number"
                 },
                 "foreTeatDiameter": {
+                    "description": "Диаметр передних сосков (9 баллов)",
                     "type": "number"
                 },
                 "foreTeatLendth": {
+                    "description": "Длина передних сосков (9 баллов)",
                     "type": "number"
                 },
                 "foreUdderAttach": {
+                    "description": "Прикрепление передних долей вымени (9 баллов)",
                     "type": "number"
                 },
                 "foreUdderPlcRear": {
+                    "description": "Расположение передних сосков (вид сзади) (9 баллов)",
                     "type": "number"
                 },
                 "foreUdderWidth": {
+                    "description": "Ширина передних долей вымени вид спереди (9 баллов)",
                     "type": "number"
                 },
                 "harmonyOfMovement": {
+                    "description": "Гармоничность движения (9 баллов)",
                     "type": "number"
                 },
                 "heightOfUdderAttach": {
+                    "description": "Высота прикрепления задних долей вымени (9 баллов)",
                     "type": "number"
                 },
                 "hindLegPosRead": {
+                    "description": "Постановка задних ног, вид сзади (9 баллов)",
                     "type": "number"
                 },
                 "hindLegPosSide": {
+                    "description": "Постановка задних ног, вид сбоку (9 баллов)",
                     "type": "number"
                 },
                 "hindTeatPlc": {
+                    "description": "Расположение задних сосков (вид сзади) \t(9 баллов)",
                     "type": "number"
                 },
                 "hindUdderWidth": {
+                    "description": "Ширина задних долей вымени (9 баллов)",
                     "type": "number"
                 },
                 "hoofAngle": {
+                    "description": "Угол наклона копытца (9 баллов)",
                     "type": "number"
                 },
                 "id": {
                     "type": "integer"
                 },
                 "limbs": {
+                    "description": "Конечности (100 баллов)",
                     "type": "number"
                 },
+                "measures": {
+                    "description": "Замеры параметров экстерьера",
+                    "allOf": [
+                        {
+                            "$ref": "#/definitions/models.Measures"
+                        }
+                    ]
+                },
                 "milkStrength": {
+                    "description": "Молочный тип (100 баллов)",
                     "type": "number"
                 },
                 "pelvicWidth": {
+                    "description": "Ширина таза (9 баллов)",
                     "type": "number"
                 },
                 "picturePath": {
                     "type": "string"
                 },
                 "prominenceOfMilkVeins": {
+                    "description": "Выраженность вен вымени (9 баллов)",
                     "type": "number"
                 },
                 "rating": {
                     "type": "number"
                 },
                 "rearTeatDiameter": {
+                    "description": "Диаметр задних сосков (9 баллов)",
+                    "type": "number"
+                },
+                "ribsAngle": {
+                    "description": "Угол наклона ребер (9 баллов)",
                     "type": "number"
                 },
-                "rearTeatLength": {
+                "sacrum": {
+                    "description": "Крестец (100 баллов) до 2025 года, эта оценка называется общий вид",
                     "type": "number"
                 },
                 "sacrumAngle": {
+                    "description": "Угол наклона крестца (9 баллов)",
                     "type": "number"
                 },
                 "sacrumHeight": {
+                    "description": "Высота в крестце (9 баллов)",
+                    "type": "number"
+                },
+                "sacrumWidth": {
+                    "description": "Ширина крестца (9 баллов)",
                     "type": "number"
                 },
                 "topLine": {
+                    "description": "Линия верха (9 баллов)",
                     "type": "number"
                 },
                 "udder": {
+                    "description": "Вымя (100 баллов)",
                     "type": "number"
                 },
                 "udderBalance": {
+                    "description": "Балланс вымени (9 баллов)",
                     "type": "number"
                 },
                 "udderDepth": {
+                    "description": "Глубина вымени (9 баллов)",
                     "type": "number"
                 }
             }
@@ -3359,7 +3803,7 @@ const docTemplate = `{
                     "type": "string"
                 },
                 "cowsCount": {
-                    "description": "количество коров",
+                    "description": "Количество коров в базе",
                     "type": "integer"
                 },
                 "description": {
@@ -3371,13 +3815,17 @@ const docTemplate = `{
                     "type": "integer"
                 },
                 "email": {
-                    "description": "эл. почта",
+                    "description": "Эл. почта",
                     "type": "string"
                 },
                 "hozNumber": {
-                    "description": "Region   Region ` + "`" + `json:\"-\"` + "`" + `\nRegionId uint",
+                    "description": "Номер хоз-ва",
                     "type": "string"
                 },
+                "hozPercentageInBase": {
+                    "description": "Процент хозяйств в базе",
+                    "type": "number"
+                },
                 "id": {
                     "type": "integer"
                 },
@@ -3390,11 +3838,11 @@ const docTemplate = `{
                     "type": "string"
                 },
                 "nameShort": {
-                    "description": "Краткое название хозйства",
+                    "description": "Краткое название хозяйства",
                     "type": "string"
                 },
                 "parrentId": {
-                    "description": "ID более управляющего хоз-ва (для хозяйства - холдинг, для фермы - хозяйство)",
+                    "description": "ID управляющего хоз-ва (для хозяйства - холдинг, для фермы - хозяйство)",
                     "type": "integer"
                 },
                 "phone": {
@@ -3430,7 +3878,7 @@ const docTemplate = `{
                     }
                 },
                 "gtcFilePath": {
-                    "description": "путь к gtc файлу относительно genmilk.ru/api/static/gtc",
+                    "description": "Путь к gtc файлу относительно genmilk.ru/api/static/gtc",
                     "type": "string"
                 },
                 "id": {
@@ -3446,7 +3894,7 @@ const docTemplate = `{
                     "type": "string"
                 },
                 "resultDate": {
-                    "description": "Дата получения  результата",
+                    "description": "Дата получения результата",
                     "allOf": [
                         {
                             "$ref": "#/definitions/models.DateOnly"
@@ -3516,28 +3964,55 @@ const docTemplate = `{
         "models.Grade": {
             "type": "object",
             "properties": {
+                "cowID": {
+                    "type": "integer"
+                },
                 "ebvFat": {
                     "description": "Оценка жира по EBV",
                     "type": "number"
                 },
+                "ebvFatReliability": {
+                    "description": "Достоверность расчета оценки жира",
+                    "type": "number"
+                },
                 "ebvInsemenation": {
                     "description": "Оценка кратности осеменения по EBV",
                     "type": "number"
                 },
+                "ebvInsemenationReliability": {
+                    "description": "Достоверность расчета оценки кратности осеменения",
+                    "type": "number"
+                },
                 "ebvMilk": {
                     "description": "Оценка удоя по EBV",
                     "type": "number"
                 },
+                "ebvMilkReliability": {
+                    "description": "Достоверность расчета оценки удоя",
+                    "type": "number"
+                },
                 "ebvProtein": {
                     "description": "Оценка белка по EBV",
                     "type": "number"
                 },
-                "evbService": {
+                "ebvProteinReliability": {
+                    "description": "Достоверность расчета оценки белка",
+                    "type": "number"
+                },
+                "ebvService": {
                     "description": "Оценка длительности сервисного периода по EBV",
                     "type": "number"
                 },
+                "ebvServiceReliability": {
+                    "description": "Достоверность расчета оценки сервисного периода",
+                    "type": "number"
+                },
                 "generalValue": {
-                    "description": "CowID           uint",
+                    "description": "Общая оценка по EBV",
+                    "type": "number"
+                },
+                "generalValueReliability": {
+                    "description": "Достоверность расчета общей оценки",
                     "type": "number"
                 },
                 "id": {
@@ -3645,7 +4120,7 @@ const docTemplate = `{
                     "type": "integer"
                 },
                 "days": {
-                    "description": "количество дней, когда корова дает молоко",
+                    "description": "Количество дней, когда корова дает молоко",
                     "type": "integer"
                 },
                 "fat305": {
@@ -3697,6 +4172,71 @@ const docTemplate = `{
                 }
             }
         },
+        "models.Measures": {
+            "type": "object",
+            "properties": {
+                "backNippleDiameter": {
+                    "description": "Диаметр задних сосков (Сантиметры или градусы)",
+                    "type": "number"
+                },
+                "backUdderSegmentsLocationHeight": {
+                    "description": "Высота прикрепления задних долей вымени (Сантиметры или градусы)",
+                    "type": "number"
+                },
+                "backUdderSegmentsWidth": {
+                    "description": "Ширина задних долей вымени (Сантиметры или градусы)",
+                    "type": "number"
+                },
+                "centralLigamentDepth": {
+                    "description": "Глубина центральной связки (Сантиметры или градусы)",
+                    "type": "number"
+                },
+                "chestWidth": {
+                    "description": "Ширина груди (Сантиметры или градусы)",
+                    "type": "number"
+                },
+                "frontNippleDiameter": {
+                    "description": "Диаметр передних сосков (Сантиметры или градусы)",
+                    "type": "number"
+                },
+                "frontNippleLength": {
+                    "description": "Длинна передних сосков (Сантиметры или градусы)",
+                    "type": "number"
+                },
+                "frontUdderSegmentsLocation": {
+                    "description": "Прикрепление передних долей вымени (Сантиметры или градусы)",
+                    "type": "number"
+                },
+                "hindLegWalkSideView": {
+                    "description": "Поступь задних ног сбоку (Сантиметры или градусы)",
+                    "type": "number"
+                },
+                "hoofAngle": {
+                    "description": "Угол копыта (Сантиметры или градусы)",
+                    "type": "number"
+                },
+                "sacrumAngle": {
+                    "description": "Угол наклона крестца (Сантиметры или градусы)",
+                    "type": "number"
+                },
+                "sacrumHeight": {
+                    "description": "высота в крестце (Сантиметры или градусы)",
+                    "type": "number"
+                },
+                "sacrumWidth": {
+                    "description": "ширина в крестце (Сантиметры или градусы)",
+                    "type": "number"
+                },
+                "udderBalance": {
+                    "description": "Баланс вымени (Сантиметры или градусы)",
+                    "type": "number"
+                },
+                "udderDepth": {
+                    "description": "Глубина вымени (Сантиметры или градусы)",
+                    "type": "number"
+                }
+            }
+        },
         "models.News": {
             "type": "object",
             "properties": {
@@ -3733,18 +4273,18 @@ const docTemplate = `{
                     "type": "string"
                 },
                 "description": {
-                    "description": "описание партнера",
+                    "description": "Описание партнера",
                     "type": "string"
                 },
                 "email": {
-                    "description": "эл. почта",
+                    "description": "Эл. почта",
                     "type": "string"
                 },
                 "id": {
                     "type": "integer"
                 },
                 "logoPath": {
-                    "description": "путь к логотипу партнера относительно genmlik.ru/api/static/partners",
+                    "description": "Путь к логотипу партнера относительно genmlik.ru/api/static/partners",
                     "type": "string"
                 },
                 "name": {
@@ -3765,7 +4305,7 @@ const docTemplate = `{
                     "default": 1
                 },
                 "name": {
-                    "description": "название региона",
+                    "description": "Название региона",
                     "type": "string",
                     "example": "Усть-Каменский"
                 },
@@ -3776,7 +4316,7 @@ const docTemplate = `{
                     }
                 },
                 "regNum": {
-                    "description": "номер региона (Архангельская область = 29)",
+                    "description": "Номер региона (Архангельская область = 29)",
                     "type": "integer"
                 }
             }
@@ -3788,7 +4328,7 @@ const docTemplate = `{
                     "type": "integer"
                 },
                 "name": {
-                    "description": "название роли",
+                    "description": "Название роли",
                     "type": "string"
                 }
             }
@@ -3824,7 +4364,7 @@ const docTemplate = `{
                     "type": "string"
                 },
                 "hozNumber": {
-                    "description": "номер хоз-ва к которому привязвыается пользователь: либо существует, либо newHoz",
+                    "description": "Номер хоз-ва к которому привязвыается пользователь: либо существует, либо newHoz",
                     "type": "string"
                 },
                 "id": {
@@ -3891,7 +4431,7 @@ const docTemplate = `{
 // SwaggerInfo holds exported Swagger Info so clients can modify it
 var SwaggerInfo = &swag.Spec{
 	Version:          "1.0",
-	Host:             "genmilk.ru",
+	Host:             "83.69.249.5",
 	BasePath:         "/api",
 	Schemes:          []string{},
 	Title:            "GenMilk API",
diff --git a/server/docs/swagger.json b/server/docs/swagger.json
index bd0de5a..e8d6d6c 100644
--- a/server/docs/swagger.json
+++ b/server/docs/swagger.json
@@ -15,7 +15,7 @@
         },
         "version": "1.0"
     },
-    "host": "genmilk.ru",
+    "host": "83.69.249.5",
     "basePath": "/api",
     "paths": {
         "/analitics/checkMilks/years": {
@@ -650,6 +650,114 @@
                 }
             }
         },
+        "/analitics/total/farm/{farm_id}": {
+            "get": {
+                "description": "Еще не придумал что возвращает",
+                "produces": [
+                    "application/json"
+                ],
+                "tags": [
+                    "NEW_ANALITICS"
+                ],
+                "summary": "Get statistics for region",
+                "parameters": [
+                    {
+                        "type": "integer",
+                        "description": "холдинг/хозяйство по которому собиается статистика",
+                        "name": "farm_id",
+                        "in": "path",
+                        "required": true
+                    }
+                ],
+                "responses": {
+                    "200": {
+                        "description": "OK",
+                        "schema": {
+                            "$ref": "#/definitions/analitics.RegionalResponse"
+                        }
+                    },
+                    "422": {
+                        "description": "Unprocessable Entity",
+                        "schema": {
+                            "type": "string"
+                        }
+                    }
+                }
+            }
+        },
+        "/analitics/total/region/{region_id}": {
+            "get": {
+                "description": "Еще не придумал что возвращает",
+                "produces": [
+                    "application/json"
+                ],
+                "tags": [
+                    "NEW_ANALITICS"
+                ],
+                "summary": "Get statistics for region",
+                "parameters": [
+                    {
+                        "type": "integer",
+                        "description": "регион по которому собиается статистика",
+                        "name": "region_id",
+                        "in": "path",
+                        "required": true
+                    }
+                ],
+                "responses": {
+                    "200": {
+                        "description": "OK",
+                        "schema": {
+                            "$ref": "#/definitions/analitics.RegionalResponse"
+                        }
+                    },
+                    "422": {
+                        "description": "Unprocessable Entity",
+                        "schema": {
+                            "type": "string"
+                        }
+                    }
+                }
+            }
+        },
+        "/analitics/total/{region_id}/regionalStatistics": {
+            "get": {
+                "description": "Еще не придумал что возвращает",
+                "produces": [
+                    "application/json"
+                ],
+                "tags": [
+                    "NEW_ANALITICS"
+                ],
+                "summary": "Get statistics for region",
+                "parameters": [
+                    {
+                        "type": "integer",
+                        "description": "регион по которому собиается статистика",
+                        "name": "region_id",
+                        "in": "path",
+                        "required": true
+                    }
+                ],
+                "responses": {
+                    "200": {
+                        "description": "OK",
+                        "schema": {
+                            "type": "array",
+                            "items": {
+                                "$ref": "#/definitions/analitics.RegionalResponse"
+                            }
+                        }
+                    },
+                    "422": {
+                        "description": "Unprocessable Entity",
+                        "schema": {
+                            "type": "string"
+                        }
+                    }
+                }
+            }
+        },
         "/auth/checkEmail": {
             "get": {
                 "consumes": [
@@ -1313,7 +1421,7 @@
         },
         "/cows/{id}/grades": {
             "get": {
-                "description": "Возращает словарь с двумя ключам \"ByRegion\" - оценки по региону и \"ByHoz\" - оценки по хозяйству",
+                "description": "Возращает словарь с ключами:\n1. ByRegion - Значения оценок EBV по региону\n2. ByHoz - Значения оценок EBV по хозяйству\n3. ByCountry - Значения оценок EBV по стране\n4. Average - Средние значения оценок EBV\n5. PercentsRegion - Отклонение оценок от среднего значения для региона",
                 "produces": [
                     "application/json"
                 ],
@@ -1554,6 +1662,7 @@
                     "Farms"
                 ],
                 "summary": "Get list of farms",
+                "deprecated": true,
                 "parameters": [
                     {
                         "type": "object",
@@ -1587,6 +1696,93 @@
                 }
             }
         },
+        "/farms/farm": {
+            "get": {
+                "description": "Возвращает список всех ферм",
+                "produces": [
+                    "application/json"
+                ],
+                "tags": [
+                    "Farms"
+                ],
+                "summary": "Get list of Farms",
+                "responses": {
+                    "200": {
+                        "description": "OK",
+                        "schema": {
+                            "type": "array",
+                            "items": {
+                                "$ref": "#/definitions/models.Farm"
+                            }
+                        }
+                    },
+                    "500": {
+                        "description": "Internal Server Error",
+                        "schema": {
+                            "type": "string"
+                        }
+                    }
+                }
+            }
+        },
+        "/farms/hold": {
+            "get": {
+                "description": "Возвращает список всех холдингов",
+                "produces": [
+                    "application/json"
+                ],
+                "tags": [
+                    "Farms"
+                ],
+                "summary": "Get list of holdings",
+                "responses": {
+                    "200": {
+                        "description": "OK",
+                        "schema": {
+                            "type": "array",
+                            "items": {
+                                "$ref": "#/definitions/models.Farm"
+                            }
+                        }
+                    },
+                    "500": {
+                        "description": "Internal Server Error",
+                        "schema": {
+                            "type": "string"
+                        }
+                    }
+                }
+            }
+        },
+        "/farms/hoz": {
+            "get": {
+                "description": "Возвращает список всех хозяйств",
+                "produces": [
+                    "application/json"
+                ],
+                "tags": [
+                    "Farms"
+                ],
+                "summary": "Get list of Hoz",
+                "responses": {
+                    "200": {
+                        "description": "OK",
+                        "schema": {
+                            "type": "array",
+                            "items": {
+                                "$ref": "#/definitions/models.Farm"
+                            }
+                        }
+                    },
+                    "500": {
+                        "description": "Internal Server Error",
+                        "schema": {
+                            "type": "string"
+                        }
+                    }
+                }
+            }
+        },
         "/farms/{id}": {
             "get": {
                 "description": "Возращает конкретную ферму (хозяйство, холдинг)",
@@ -1810,7 +2006,7 @@
                     "application/json"
                 ],
                 "tags": [
-                    "Regions"
+                    "zzDeprecated"
                 ],
                 "summary": "Get farm by region id",
                 "parameters": [
@@ -2001,9 +2197,108 @@
                 "summary": "Get list of sexes",
                 "responses": {}
             }
+        },
+        "/user/whoami": {
+            "get": {
+                "description": "Рут вернет данные о пользователе из БД",
+                "produces": [
+                    "application/json"
+                ],
+                "tags": [
+                    "User"
+                ],
+                "summary": "Получить информацию о пользователе",
+                "responses": {
+                    "200": {
+                        "description": "OK",
+                        "schema": {
+                            "type": "string"
+                        }
+                    },
+                    "401": {
+                        "description": "Unauthorized",
+                        "schema": {
+                            "type": "string"
+                        }
+                    },
+                    "500": {
+                        "description": "Internal Server Error",
+                        "schema": {
+                            "type": "string"
+                        }
+                    }
+                }
+            }
         }
     },
     "definitions": {
+        "analitics.RegionalResponse": {
+            "type": "object",
+            "properties": {
+                "avgCount": {
+                    "description": "Количество коров с минимальным индексом",
+                    "type": "integer"
+                },
+                "avgCowIds": {
+                    "description": "ID коров с средним значением индекса",
+                    "type": "array",
+                    "items": {
+                        "type": "number"
+                    }
+                },
+                "avgIndex": {
+                    "description": "Значение среднего индекса",
+                    "type": "number"
+                },
+                "farm": {
+                    "$ref": "#/definitions/models.Farm"
+                },
+                "farmID": {
+                    "description": "не null, если статистика собрана по холдингу или хозяйству",
+                    "type": "integer"
+                },
+                "id": {
+                    "type": "integer"
+                },
+                "maxCount": {
+                    "description": "Количество коров с максимальным индексом",
+                    "type": "integer"
+                },
+                "maxCowIds": {
+                    "description": "ID коров с максимальным значением индекса",
+                    "type": "array",
+                    "items": {
+                        "type": "number"
+                    }
+                },
+                "maxIndex": {
+                    "description": "Значение максимального индекса",
+                    "type": "number"
+                },
+                "minCount": {
+                    "description": "Количество коров с минимальным индексом",
+                    "type": "integer"
+                },
+                "minCowIds": {
+                    "description": "ID коров с минимальным значением индекса",
+                    "type": "array",
+                    "items": {
+                        "type": "number"
+                    }
+                },
+                "minIndex": {
+                    "description": "Значение минимального индекса",
+                    "type": "number"
+                },
+                "region": {
+                    "$ref": "#/definitions/models.Region"
+                },
+                "regionID": {
+                    "description": "не null, если статистика собрана по региону",
+                    "type": "integer"
+                }
+            }
+        },
         "analitics.byDistrictStatistics": {
             "type": "object",
             "properties": {
@@ -2299,6 +2594,10 @@
                         }
                     ]
                 },
+                "ebvGeneralValueRegion": {
+                    "description": "Общая оценка EBV по региону",
+                    "type": "number"
+                },
                 "events": {
                     "description": "Вет события",
                     "type": "array",
@@ -2406,7 +2705,7 @@
             "type": "object",
             "properties": {
                 "checkDate": {
-                    "description": "Дата конрольной дойки",
+                    "description": "Дата контрольной дойки",
                     "allOf": [
                         {
                             "$ref": "#/definitions/models.DateOnly"
@@ -2414,7 +2713,7 @@
                     ]
                 },
                 "dryMatter": {
-                    "description": "сухой материал",
+                    "description": "Сухой материал",
                     "type": "number"
                 },
                 "fat": {
@@ -2446,7 +2745,7 @@
                     "type": "integer"
                 },
                 "probeNumber": {
-                    "description": "номер пробы",
+                    "description": "Номер пробы",
                     "type": "integer"
                 },
                 "protein": {
@@ -2455,7 +2754,7 @@
                     "example": 1
                 },
                 "somaticNucCount": {
-                    "description": "количество соматических клеток",
+                    "description": "Количество соматических клеток",
                     "type": "number"
                 }
             }
@@ -2489,7 +2788,7 @@
                     "type": "integer"
                 },
                 "birthMethod": {
-                    "description": "способ зачатия: клон, эмбрион, искусственное осеменени, естественное осеменение",
+                    "description": "Способ зачатия: клон, эмбрион, искусственное осеменени, естественное осеменение",
                     "type": "string"
                 },
                 "breedId": {
@@ -2554,16 +2853,6 @@
                 "genetic": {
                     "$ref": "#/definitions/models.Genetic"
                 },
-                "gradeHozId": {
-                    "description": "оценка по хозяйству",
-                    "type": "integer",
-                    "example": 1
-                },
-                "gradeRegionId": {
-                    "description": "оценка по региону",
-                    "type": "integer",
-                    "example": 1
-                },
                 "holding": {
                     "$ref": "#/definitions/models.Farm"
                 },
@@ -2581,7 +2870,7 @@
                     "example": 1
                 },
                 "identificationNumber": {
-                    "description": "он все-таки есть! это какой-то не российский номер коровы",
+                    "description": "Он все-таки есть! Это какой-то не российский номер коровы",
                     "type": "string"
                 },
                 "inbrindingCoeffByFamily": {
@@ -2704,6 +2993,14 @@
                     "type": "string",
                     "example": "2800-01-21"
                 },
+                "ebvGeneralValueRegionFrom": {
+                    "type": "number",
+                    "example": 3.14
+                },
+                "ebvGeneralValueRegionTo": {
+                    "type": "number",
+                    "example": 3.14
+                },
                 "entitiesOnPage": {
                     "description": "Количество сущностей на странице",
                     "type": "integer",
@@ -2769,6 +3066,13 @@
                     "type": "number",
                     "default": 3.14
                 },
+                "includeOnly": {
+                    "description": "ID коров, которые могут быть в выдаче фильтра. Пустой = ВСЕ коровы",
+                    "type": "array",
+                    "items": {
+                        "type": "integer"
+                    }
+                },
                 "inseminationDateFrom": {
                     "description": "Exterior             *float64 `default:\"3.14\" validate:\"optional\"`       // Фильтр по оценке экстерьера коровы, будет переработан",
                     "type": "string",
@@ -2816,7 +3120,7 @@
                     }
                 },
                 "orderBy": {
-                    "description": "Может принимать следующие и только следующие значения: null, \"RSHN\", \"InventoryNumber\", \"Name\", \"HozName\", \"BirthDate\"",
+                    "description": "Может принимать следующие и только следующие значения: null, \"RSHN\", \"InventoryNumber\", \"Name\", \"HozName\", \"BirthDate\", \"GeneralEbvRegion\"",
                     "type": "string"
                 },
                 "orderByDesc": {
@@ -2846,6 +3150,35 @@
                 }
             }
         },
+        "models.AdditionalInfo": {
+            "type": "object",
+            "properties": {
+                "additionalProperty1Measure": {
+                    "description": "Дополнительный параметр 1 (значение в единицах измерения)",
+                    "type": "string"
+                },
+                "additionalProperty1Name": {
+                    "description": "Дополнительный параметр 1 (название)",
+                    "type": "string"
+                },
+                "additionalProperty1Value": {
+                    "description": "Дополнительный параметр 1 (значение в баллах)",
+                    "type": "string"
+                },
+                "additionalProperty2Measure": {
+                    "description": "Дополнительный параметр 2 (значение в единицах измерения)",
+                    "type": "string"
+                },
+                "additionalProperty2Name": {
+                    "description": "Дополнительный параметр 2 (название)",
+                    "type": "string"
+                },
+                "additionalProperty2Value": {
+                    "description": "Дополнительный параметр 2 (значение в баллах)",
+                    "type": "string"
+                }
+            }
+        },
         "models.Breed": {
             "type": "object",
             "properties": {
@@ -2865,7 +3198,7 @@
             "type": "object",
             "properties": {
                 "checkDate": {
-                    "description": "Дата конрольной дойки",
+                    "description": "Дата контрольной дойки",
                     "allOf": [
                         {
                             "$ref": "#/definitions/models.DateOnly"
@@ -2873,7 +3206,7 @@
                     ]
                 },
                 "dryMatter": {
-                    "description": "сухой материал",
+                    "description": "Сухой материал",
                     "type": "number"
                 },
                 "fat": {
@@ -2897,7 +3230,7 @@
                     "example": 1
                 },
                 "probeNumber": {
-                    "description": "номер пробы",
+                    "description": "Номер пробы",
                     "type": "integer"
                 },
                 "protein": {
@@ -2906,7 +3239,7 @@
                     "example": 1
                 },
                 "somaticNucCount": {
-                    "description": "количество соматических клеток",
+                    "description": "Количество соматических клеток",
                     "type": "number"
                 }
             }
@@ -2940,7 +3273,7 @@
                     "type": "integer"
                 },
                 "birthMethod": {
-                    "description": "способ зачатия: клон, эмбрион, искусственное осеменени, естественное осеменение",
+                    "description": "Способ зачатия: клон, эмбрион, искусственное осеменени, естественное осеменение",
                     "type": "string"
                 },
                 "breedId": {
@@ -2989,16 +3322,6 @@
                 "genetic": {
                     "$ref": "#/definitions/models.Genetic"
                 },
-                "gradeHozId": {
-                    "description": "оценка по хозяйству",
-                    "type": "integer",
-                    "example": 1
-                },
-                "gradeRegionId": {
-                    "description": "оценка по региону",
-                    "type": "integer",
-                    "example": 1
-                },
                 "holding": {
                     "$ref": "#/definitions/models.Farm"
                 },
@@ -3012,7 +3335,7 @@
                     "example": 1
                 },
                 "identificationNumber": {
-                    "description": "он все-таки есть! это какой-то не российский номер коровы",
+                    "description": "Он все-таки есть! Это какой-то не российский номер коровы",
                     "type": "string"
                 },
                 "inbrindingCoeffByFamily": {
@@ -3143,7 +3466,56 @@
                     "type": "integer"
                 },
                 "path": {
-                    "description": "путь к документу относительно genmilk.ru/api/static/documents",
+                    "description": "Путь к документу относительно genmilk.ru/api/static/documents",
+                    "type": "string"
+                }
+            }
+        },
+        "models.DownSides": {
+            "type": "object",
+            "properties": {
+                "bodyCount": {
+                    "description": "Туловище",
+                    "type": "number"
+                },
+                "bodyDescription": {
+                    "description": "Список недостатков туловища разделитель: \"/\"",
+                    "type": "string"
+                },
+                "limbsCount": {
+                    "description": "Конечности",
+                    "type": "number"
+                },
+                "limbsDescription": {
+                    "description": "Список недостатков конечностей разделитель: \"/\"",
+                    "type": "string"
+                },
+                "milkTypeCount": {
+                    "description": "Молочный тип",
+                    "type": "number"
+                },
+                "milkTypeDescription": {
+                    "description": "Список недостатков Молочного типа. Разделитель: \"/\"",
+                    "type": "string"
+                },
+                "sacrumCount": {
+                    "description": "Крестец",
+                    "type": "number"
+                },
+                "sacrumDescription": {
+                    "description": "Список недостатков крестца разделитель: \"/\"",
+                    "type": "string"
+                },
+                "summary": {
+                    "description": "Сводные данные о недостатках разделитель \"/\"",
+                    "type": "string"
+                },
+                "udderCount": {
+                    "description": "Вымя",
+                    "type": "number"
+                },
+                "udderDescription": {
+                    "description": "Список недостатков вымени разделитель: \"/\"",
                     "type": "string"
                 }
             }
@@ -3152,11 +3524,11 @@
             "type": "object",
             "properties": {
                 "comment1": {
-                    "description": "Коментарий 1 (по всей видиости сюда что-то пришет врач)",
+                    "description": "Комментарий 1 (по всей видимости сюда что-то пришит врач)",
                     "type": "string"
                 },
                 "comment2": {
-                    "description": "Коментарий 2",
+                    "description": "Комментарий 2",
                     "type": "string"
                 },
                 "cowId": {
@@ -3164,7 +3536,7 @@
                     "type": "integer"
                 },
                 "dataResourse": {
-                    "description": "источник данных",
+                    "description": "Источник данных",
                     "type": "string"
                 },
                 "date": {
@@ -3176,7 +3548,7 @@
                     ]
                 },
                 "daysFromLactation": {
-                    "description": "дни от начала лактации",
+                    "description": "Дни от начала лактации",
                     "type": "integer"
                 },
                 "eventType": {
@@ -3186,18 +3558,18 @@
                     "$ref": "#/definitions/models.EventType"
                 },
                 "eventType1Id": {
-                    "description": "стандартизированная название события",
+                    "description": "Стандартизированная название события",
                     "type": "integer"
                 },
                 "eventType2": {
                     "$ref": "#/definitions/models.EventType"
                 },
                 "eventType2Id": {
-                    "description": "стандартизированное разновидность события",
+                    "description": "Стандартизированное разновидность события",
                     "type": "integer"
                 },
                 "eventTypeId": {
-                    "description": "стандартизированная группа события",
+                    "description": "Стандартизированная группа события",
                     "type": "integer"
                 },
                 "id": {
@@ -3209,7 +3581,7 @@
             "type": "object",
             "properties": {
                 "code": {
-                    "description": "код группы или разновидности или названия события",
+                    "description": "Код группы или разновидности или названия события",
                     "type": "integer"
                 },
                 "id": {
@@ -3233,114 +3605,186 @@
             "type": "object",
             "properties": {
                 "acrumLength": {
+                    "description": "Длина крестца (9 баллов)",
                     "type": "number"
                 },
+                "additionalInfo": {
+                    "description": "Доп. признаки",
+                    "allOf": [
+                        {
+                            "$ref": "#/definitions/models.AdditionalInfo"
+                        }
+                    ]
+                },
+                "assessmentDate": {
+                    "$ref": "#/definitions/models.DateOnly"
+                },
                 "bodyDepth": {
+                    "description": "Глубина туловища (9 баллов)",
                     "type": "number"
                 },
                 "bodyStructure": {
+                    "description": "Туловище (100 баллов)",
                     "type": "number"
                 },
                 "boneQHockJointRear": {
+                    "description": "Качество костяка (9 баллов)",
                     "type": "number"
                 },
                 "centerLigamentDepth": {
+                    "description": "Глубина центральной связки (9 баллов)",
                     "type": "number"
                 },
                 "chestWidth": {
+                    "description": "Ширина груди (9 баллов)",
                     "type": "number"
                 },
                 "conditioning": {
+                    "description": "Упитанность (9 баллов)",
                     "type": "number"
                 },
                 "cowID": {
                     "type": "integer"
                 },
+                "deceptions": {
+                    "description": "Обмускульность (9 баллов)",
+                    "type": "number"
+                },
+                "downSides": {
+                    "description": "Недостатки (пороки)",
+                    "allOf": [
+                        {
+                            "$ref": "#/definitions/models.DownSides"
+                        }
+                    ]
+                },
                 "exteriorType": {
+                    "description": "Тип телосложения (9 баллов)",
                     "type": "number"
                 },
                 "foreLegPosFront": {
+                    "description": "Постановка передних ног (9 баллов)",
                     "type": "number"
                 },
                 "foreTeatDiameter": {
+                    "description": "Диаметр передних сосков (9 баллов)",
                     "type": "number"
                 },
                 "foreTeatLendth": {
+                    "description": "Длина передних сосков (9 баллов)",
                     "type": "number"
                 },
                 "foreUdderAttach": {
+                    "description": "Прикрепление передних долей вымени (9 баллов)",
                     "type": "number"
                 },
                 "foreUdderPlcRear": {
+                    "description": "Расположение передних сосков (вид сзади) (9 баллов)",
                     "type": "number"
                 },
                 "foreUdderWidth": {
+                    "description": "Ширина передних долей вымени вид спереди (9 баллов)",
                     "type": "number"
                 },
                 "harmonyOfMovement": {
+                    "description": "Гармоничность движения (9 баллов)",
                     "type": "number"
                 },
                 "heightOfUdderAttach": {
+                    "description": "Высота прикрепления задних долей вымени (9 баллов)",
                     "type": "number"
                 },
                 "hindLegPosRead": {
+                    "description": "Постановка задних ног, вид сзади (9 баллов)",
                     "type": "number"
                 },
                 "hindLegPosSide": {
+                    "description": "Постановка задних ног, вид сбоку (9 баллов)",
                     "type": "number"
                 },
                 "hindTeatPlc": {
+                    "description": "Расположение задних сосков (вид сзади) \t(9 баллов)",
                     "type": "number"
                 },
                 "hindUdderWidth": {
+                    "description": "Ширина задних долей вымени (9 баллов)",
                     "type": "number"
                 },
                 "hoofAngle": {
+                    "description": "Угол наклона копытца (9 баллов)",
                     "type": "number"
                 },
                 "id": {
                     "type": "integer"
                 },
                 "limbs": {
+                    "description": "Конечности (100 баллов)",
                     "type": "number"
                 },
+                "measures": {
+                    "description": "Замеры параметров экстерьера",
+                    "allOf": [
+                        {
+                            "$ref": "#/definitions/models.Measures"
+                        }
+                    ]
+                },
                 "milkStrength": {
+                    "description": "Молочный тип (100 баллов)",
                     "type": "number"
                 },
                 "pelvicWidth": {
+                    "description": "Ширина таза (9 баллов)",
                     "type": "number"
                 },
                 "picturePath": {
                     "type": "string"
                 },
                 "prominenceOfMilkVeins": {
+                    "description": "Выраженность вен вымени (9 баллов)",
                     "type": "number"
                 },
                 "rating": {
                     "type": "number"
                 },
                 "rearTeatDiameter": {
+                    "description": "Диаметр задних сосков (9 баллов)",
+                    "type": "number"
+                },
+                "ribsAngle": {
+                    "description": "Угол наклона ребер (9 баллов)",
                     "type": "number"
                 },
-                "rearTeatLength": {
+                "sacrum": {
+                    "description": "Крестец (100 баллов) до 2025 года, эта оценка называется общий вид",
                     "type": "number"
                 },
                 "sacrumAngle": {
+                    "description": "Угол наклона крестца (9 баллов)",
                     "type": "number"
                 },
                 "sacrumHeight": {
+                    "description": "Высота в крестце (9 баллов)",
+                    "type": "number"
+                },
+                "sacrumWidth": {
+                    "description": "Ширина крестца (9 баллов)",
                     "type": "number"
                 },
                 "topLine": {
+                    "description": "Линия верха (9 баллов)",
                     "type": "number"
                 },
                 "udder": {
+                    "description": "Вымя (100 баллов)",
                     "type": "number"
                 },
                 "udderBalance": {
+                    "description": "Балланс вымени (9 баллов)",
                     "type": "number"
                 },
                 "udderDepth": {
+                    "description": "Глубина вымени (9 баллов)",
                     "type": "number"
                 }
             }
@@ -3353,7 +3797,7 @@
                     "type": "string"
                 },
                 "cowsCount": {
-                    "description": "количество коров",
+                    "description": "Количество коров в базе",
                     "type": "integer"
                 },
                 "description": {
@@ -3365,13 +3809,17 @@
                     "type": "integer"
                 },
                 "email": {
-                    "description": "эл. почта",
+                    "description": "Эл. почта",
                     "type": "string"
                 },
                 "hozNumber": {
-                    "description": "Region   Region `json:\"-\"`\nRegionId uint",
+                    "description": "Номер хоз-ва",
                     "type": "string"
                 },
+                "hozPercentageInBase": {
+                    "description": "Процент хозяйств в базе",
+                    "type": "number"
+                },
                 "id": {
                     "type": "integer"
                 },
@@ -3384,11 +3832,11 @@
                     "type": "string"
                 },
                 "nameShort": {
-                    "description": "Краткое название хозйства",
+                    "description": "Краткое название хозяйства",
                     "type": "string"
                 },
                 "parrentId": {
-                    "description": "ID более управляющего хоз-ва (для хозяйства - холдинг, для фермы - хозяйство)",
+                    "description": "ID управляющего хоз-ва (для хозяйства - холдинг, для фермы - хозяйство)",
                     "type": "integer"
                 },
                 "phone": {
@@ -3424,7 +3872,7 @@
                     }
                 },
                 "gtcFilePath": {
-                    "description": "путь к gtc файлу относительно genmilk.ru/api/static/gtc",
+                    "description": "Путь к gtc файлу относительно genmilk.ru/api/static/gtc",
                     "type": "string"
                 },
                 "id": {
@@ -3440,7 +3888,7 @@
                     "type": "string"
                 },
                 "resultDate": {
-                    "description": "Дата получения  результата",
+                    "description": "Дата получения результата",
                     "allOf": [
                         {
                             "$ref": "#/definitions/models.DateOnly"
@@ -3510,28 +3958,55 @@
         "models.Grade": {
             "type": "object",
             "properties": {
+                "cowID": {
+                    "type": "integer"
+                },
                 "ebvFat": {
                     "description": "Оценка жира по EBV",
                     "type": "number"
                 },
+                "ebvFatReliability": {
+                    "description": "Достоверность расчета оценки жира",
+                    "type": "number"
+                },
                 "ebvInsemenation": {
                     "description": "Оценка кратности осеменения по EBV",
                     "type": "number"
                 },
+                "ebvInsemenationReliability": {
+                    "description": "Достоверность расчета оценки кратности осеменения",
+                    "type": "number"
+                },
                 "ebvMilk": {
                     "description": "Оценка удоя по EBV",
                     "type": "number"
                 },
+                "ebvMilkReliability": {
+                    "description": "Достоверность расчета оценки удоя",
+                    "type": "number"
+                },
                 "ebvProtein": {
                     "description": "Оценка белка по EBV",
                     "type": "number"
                 },
-                "evbService": {
+                "ebvProteinReliability": {
+                    "description": "Достоверность расчета оценки белка",
+                    "type": "number"
+                },
+                "ebvService": {
                     "description": "Оценка длительности сервисного периода по EBV",
                     "type": "number"
                 },
+                "ebvServiceReliability": {
+                    "description": "Достоверность расчета оценки сервисного периода",
+                    "type": "number"
+                },
                 "generalValue": {
-                    "description": "CowID           uint",
+                    "description": "Общая оценка по EBV",
+                    "type": "number"
+                },
+                "generalValueReliability": {
+                    "description": "Достоверность расчета общей оценки",
                     "type": "number"
                 },
                 "id": {
@@ -3639,7 +4114,7 @@
                     "type": "integer"
                 },
                 "days": {
-                    "description": "количество дней, когда корова дает молоко",
+                    "description": "Количество дней, когда корова дает молоко",
                     "type": "integer"
                 },
                 "fat305": {
@@ -3691,6 +4166,71 @@
                 }
             }
         },
+        "models.Measures": {
+            "type": "object",
+            "properties": {
+                "backNippleDiameter": {
+                    "description": "Диаметр задних сосков (Сантиметры или градусы)",
+                    "type": "number"
+                },
+                "backUdderSegmentsLocationHeight": {
+                    "description": "Высота прикрепления задних долей вымени (Сантиметры или градусы)",
+                    "type": "number"
+                },
+                "backUdderSegmentsWidth": {
+                    "description": "Ширина задних долей вымени (Сантиметры или градусы)",
+                    "type": "number"
+                },
+                "centralLigamentDepth": {
+                    "description": "Глубина центральной связки (Сантиметры или градусы)",
+                    "type": "number"
+                },
+                "chestWidth": {
+                    "description": "Ширина груди (Сантиметры или градусы)",
+                    "type": "number"
+                },
+                "frontNippleDiameter": {
+                    "description": "Диаметр передних сосков (Сантиметры или градусы)",
+                    "type": "number"
+                },
+                "frontNippleLength": {
+                    "description": "Длинна передних сосков (Сантиметры или градусы)",
+                    "type": "number"
+                },
+                "frontUdderSegmentsLocation": {
+                    "description": "Прикрепление передних долей вымени (Сантиметры или градусы)",
+                    "type": "number"
+                },
+                "hindLegWalkSideView": {
+                    "description": "Поступь задних ног сбоку (Сантиметры или градусы)",
+                    "type": "number"
+                },
+                "hoofAngle": {
+                    "description": "Угол копыта (Сантиметры или градусы)",
+                    "type": "number"
+                },
+                "sacrumAngle": {
+                    "description": "Угол наклона крестца (Сантиметры или градусы)",
+                    "type": "number"
+                },
+                "sacrumHeight": {
+                    "description": "высота в крестце (Сантиметры или градусы)",
+                    "type": "number"
+                },
+                "sacrumWidth": {
+                    "description": "ширина в крестце (Сантиметры или градусы)",
+                    "type": "number"
+                },
+                "udderBalance": {
+                    "description": "Баланс вымени (Сантиметры или градусы)",
+                    "type": "number"
+                },
+                "udderDepth": {
+                    "description": "Глубина вымени (Сантиметры или градусы)",
+                    "type": "number"
+                }
+            }
+        },
         "models.News": {
             "type": "object",
             "properties": {
@@ -3727,18 +4267,18 @@
                     "type": "string"
                 },
                 "description": {
-                    "description": "описание партнера",
+                    "description": "Описание партнера",
                     "type": "string"
                 },
                 "email": {
-                    "description": "эл. почта",
+                    "description": "Эл. почта",
                     "type": "string"
                 },
                 "id": {
                     "type": "integer"
                 },
                 "logoPath": {
-                    "description": "путь к логотипу партнера относительно genmlik.ru/api/static/partners",
+                    "description": "Путь к логотипу партнера относительно genmlik.ru/api/static/partners",
                     "type": "string"
                 },
                 "name": {
@@ -3759,7 +4299,7 @@
                     "default": 1
                 },
                 "name": {
-                    "description": "название региона",
+                    "description": "Название региона",
                     "type": "string",
                     "example": "Усть-Каменский"
                 },
@@ -3770,7 +4310,7 @@
                     }
                 },
                 "regNum": {
-                    "description": "номер региона (Архангельская область = 29)",
+                    "description": "Номер региона (Архангельская область = 29)",
                     "type": "integer"
                 }
             }
@@ -3782,7 +4322,7 @@
                     "type": "integer"
                 },
                 "name": {
-                    "description": "название роли",
+                    "description": "Название роли",
                     "type": "string"
                 }
             }
@@ -3818,7 +4358,7 @@
                     "type": "string"
                 },
                 "hozNumber": {
-                    "description": "номер хоз-ва к которому привязвыается пользователь: либо существует, либо newHoz",
+                    "description": "Номер хоз-ва к которому привязвыается пользователь: либо существует, либо newHoz",
                     "type": "string"
                 },
                 "id": {
diff --git a/server/docs/swagger.yaml b/server/docs/swagger.yaml
index be946b7..48c92d6 100644
--- a/server/docs/swagger.yaml
+++ b/server/docs/swagger.yaml
@@ -1,5 +1,53 @@
 basePath: /api
 definitions:
+  analitics.RegionalResponse:
+    properties:
+      avgCount:
+        description: Количество коров с минимальным индексом
+        type: integer
+      avgCowIds:
+        description: ID коров с средним значением индекса
+        items:
+          type: number
+        type: array
+      avgIndex:
+        description: Значение среднего индекса
+        type: number
+      farm:
+        $ref: '#/definitions/models.Farm'
+      farmID:
+        description: не null, если статистика собрана по холдингу или хозяйству
+        type: integer
+      id:
+        type: integer
+      maxCount:
+        description: Количество коров с максимальным индексом
+        type: integer
+      maxCowIds:
+        description: ID коров с максимальным значением индекса
+        items:
+          type: number
+        type: array
+      maxIndex:
+        description: Значение максимального индекса
+        type: number
+      minCount:
+        description: Количество коров с минимальным индексом
+        type: integer
+      minCowIds:
+        description: ID коров с минимальным значением индекса
+        items:
+          type: number
+        type: array
+      minIndex:
+        description: Значение минимального индекса
+        type: number
+      region:
+        $ref: '#/definitions/models.Region'
+      regionID:
+        description: не null, если статистика собрана по региону
+        type: integer
+    type: object
   analitics.byDistrictStatistics:
     properties:
       alive:
@@ -195,6 +243,9 @@ definitions:
         allOf:
         - $ref: '#/definitions/models.DateOnly'
         description: Дата выбытия
+      ebvGeneralValueRegion:
+        description: Общая оценка EBV по региону
+        type: number
       events:
         description: Вет события
         items:
@@ -285,9 +336,9 @@ definitions:
       checkDate:
         allOf:
         - $ref: '#/definitions/models.DateOnly'
-        description: Дата конрольной дойки
+        description: Дата контрольной дойки
       dryMatter:
-        description: сухой материал
+        description: Сухой материал
         type: number
       fat:
         description: Параметр контрольной дойки, как я понимаю кол-во жира в молоке
@@ -312,14 +363,14 @@ definitions:
         description: День доения относительно начала лактации
         type: integer
       probeNumber:
-        description: номер пробы
+        description: Номер пробы
         type: integer
       protein:
         description: Параметр контрольной дойки, как я понимаю кол-во белка в молоке
         example: 1
         type: number
       somaticNucCount:
-        description: количество соматических клеток
+        description: Количество соматических клеток
         type: number
     type: object
   cows.ReserealizedCow:
@@ -341,7 +392,7 @@ definitions:
         description: ID хозяйства рождения
         type: integer
       birthMethod:
-        description: 'способ зачатия: клон, эмбрион, искусственное осеменени, естественное
+        description: 'Способ зачатия: клон, эмбрион, искусственное осеменени, естественное
           осеменение'
         type: string
       breedId:
@@ -385,14 +436,6 @@ definitions:
         type: integer
       genetic:
         $ref: '#/definitions/models.Genetic'
-      gradeHozId:
-        description: оценка по хозяйству
-        example: 1
-        type: integer
-      gradeRegionId:
-        description: оценка по региону
-        example: 1
-        type: integer
       holding:
         $ref: '#/definitions/models.Farm'
       holdingID:
@@ -406,7 +449,7 @@ definitions:
         example: 1
         type: integer
       identificationNumber:
-        description: он все-таки есть! это какой-то не российский номер коровы
+        description: Он все-таки есть! Это какой-то не российский номер коровы
         type: string
       inbrindingCoeffByFamily:
         description: Exterior                float64  `example:"3.14"` // Оценка экстерьера
@@ -512,6 +555,12 @@ definitions:
           от коровника в эту дату или раньше
         example: "2800-01-21"
         type: string
+      ebvGeneralValueRegionFrom:
+        example: 3.14
+        type: number
+      ebvGeneralValueRegionTo:
+        example: 3.14
+        type: number
       entitiesOnPage:
         default: 50
         description: Количество сущностей на странице
@@ -565,6 +614,11 @@ definitions:
         default: 3.14
         description: фильтр по коэф. инбриндинга по генотипу ДО
         type: number
+      includeOnly:
+        description: ID коров, которые могут быть в выдаче фильтра. Пустой = ВСЕ коровы
+        items:
+          type: integer
+        type: array
       inseminationDateFrom:
         description: Exterior             *float64 `default:"3.14" validate:"optional"`       //
           Фильтр по оценке экстерьера коровы, будет переработан
@@ -605,7 +659,7 @@ definitions:
         type: array
       orderBy:
         description: 'Может принимать следующие и только следующие значения: null,
-          "RSHN", "InventoryNumber", "Name", "HozName", "BirthDate"'
+          "RSHN", "InventoryNumber", "Name", "HozName", "BirthDate", "GeneralEbvRegion"'
         type: string
       orderByDesc:
         description: true - в порядке убывания, false - в порядке возрастания
@@ -628,6 +682,27 @@ definitions:
           type: integer
         type: array
     type: object
+  models.AdditionalInfo:
+    properties:
+      additionalProperty1Measure:
+        description: Дополнительный параметр 1 (значение в единицах измерения)
+        type: string
+      additionalProperty1Name:
+        description: Дополнительный параметр 1 (название)
+        type: string
+      additionalProperty1Value:
+        description: Дополнительный параметр 1 (значение в баллах)
+        type: string
+      additionalProperty2Measure:
+        description: Дополнительный параметр 2 (значение в единицах измерения)
+        type: string
+      additionalProperty2Name:
+        description: Дополнительный параметр 2 (название)
+        type: string
+      additionalProperty2Value:
+        description: Дополнительный параметр 2 (значение в баллах)
+        type: string
+    type: object
   models.Breed:
     properties:
       id:
@@ -644,9 +719,9 @@ definitions:
       checkDate:
         allOf:
         - $ref: '#/definitions/models.DateOnly'
-        description: Дата конрольной дойки
+        description: Дата контрольной дойки
       dryMatter:
-        description: сухой материал
+        description: Сухой материал
         type: number
       fat:
         description: Параметр контрольной дойки, как я понимаю кол-во жира в молоке
@@ -665,14 +740,14 @@ definitions:
         example: 1
         type: number
       probeNumber:
-        description: номер пробы
+        description: Номер пробы
         type: integer
       protein:
         description: Параметр контрольной дойки, как я понимаю кол-во белка в молоке
         example: 1
         type: number
       somaticNucCount:
-        description: количество соматических клеток
+        description: Количество соматических клеток
         type: number
     type: object
   models.Cow:
@@ -694,7 +769,7 @@ definitions:
         description: ID хозяйства рождения
         type: integer
       birthMethod:
-        description: 'способ зачатия: клон, эмбрион, искусственное осеменени, естественное
+        description: 'Способ зачатия: клон, эмбрион, искусственное осеменени, естественное
           осеменение'
         type: string
       breedId:
@@ -728,14 +803,6 @@ definitions:
         type: integer
       genetic:
         $ref: '#/definitions/models.Genetic'
-      gradeHozId:
-        description: оценка по хозяйству
-        example: 1
-        type: integer
-      gradeRegionId:
-        description: оценка по региону
-        example: 1
-        type: integer
       holding:
         $ref: '#/definitions/models.Farm'
       holdingID:
@@ -746,7 +813,7 @@ definitions:
         example: 1
         type: integer
       identificationNumber:
-        description: он все-таки есть! это какой-то не российский номер коровы
+        description: Он все-таки есть! Это какой-то не российский номер коровы
         type: string
       inbrindingCoeffByFamily:
         description: Exterior                float64  `example:"3.14"` // Оценка экстерьера
@@ -843,44 +910,80 @@ definitions:
         description: ID
         type: integer
       path:
-        description: путь к документу относительно genmilk.ru/api/static/documents
+        description: Путь к документу относительно genmilk.ru/api/static/documents
+        type: string
+    type: object
+  models.DownSides:
+    properties:
+      bodyCount:
+        description: Туловище
+        type: number
+      bodyDescription:
+        description: 'Список недостатков туловища разделитель: "/"'
+        type: string
+      limbsCount:
+        description: Конечности
+        type: number
+      limbsDescription:
+        description: 'Список недостатков конечностей разделитель: "/"'
+        type: string
+      milkTypeCount:
+        description: Молочный тип
+        type: number
+      milkTypeDescription:
+        description: 'Список недостатков Молочного типа. Разделитель: "/"'
+        type: string
+      sacrumCount:
+        description: Крестец
+        type: number
+      sacrumDescription:
+        description: 'Список недостатков крестца разделитель: "/"'
+        type: string
+      summary:
+        description: Сводные данные о недостатках разделитель "/"
+        type: string
+      udderCount:
+        description: Вымя
+        type: number
+      udderDescription:
+        description: 'Список недостатков вымени разделитель: "/"'
         type: string
     type: object
   models.Event:
     properties:
       comment1:
-        description: Коментарий 1 (по всей видиости сюда что-то пришет врач)
+        description: Комментарий 1 (по всей видимости сюда что-то пришит врач)
         type: string
       comment2:
-        description: Коментарий 2
+        description: Комментарий 2
         type: string
       cowId:
         description: ID коровы
         type: integer
       dataResourse:
-        description: источник данных
+        description: Источник данных
         type: string
       date:
         allOf:
         - $ref: '#/definitions/models.DateOnly'
         description: Дата ветеринарного события
       daysFromLactation:
-        description: дни от начала лактации
+        description: Дни от начала лактации
         type: integer
       eventType:
         $ref: '#/definitions/models.EventType'
       eventType1:
         $ref: '#/definitions/models.EventType'
       eventType1Id:
-        description: стандартизированная название события
+        description: Стандартизированная название события
         type: integer
       eventType2:
         $ref: '#/definitions/models.EventType'
       eventType2Id:
-        description: стандартизированное разновидность события
+        description: Стандартизированное разновидность события
         type: integer
       eventTypeId:
-        description: стандартизированная группа события
+        description: Стандартизированная группа события
         type: integer
       id:
         type: integer
@@ -888,7 +991,7 @@ definitions:
   models.EventType:
     properties:
       code:
-        description: код группы или разновидности или названия события
+        description: Код группы или разновидности или названия события
         type: integer
       id:
         type: integer
@@ -906,78 +1009,135 @@ definitions:
   models.Exterior:
     properties:
       acrumLength:
+        description: Длина крестца (9 баллов)
         type: number
+      additionalInfo:
+        allOf:
+        - $ref: '#/definitions/models.AdditionalInfo'
+        description: Доп. признаки
+      assessmentDate:
+        $ref: '#/definitions/models.DateOnly'
       bodyDepth:
+        description: Глубина туловища (9 баллов)
         type: number
       bodyStructure:
+        description: Туловище (100 баллов)
         type: number
       boneQHockJointRear:
+        description: Качество костяка (9 баллов)
         type: number
       centerLigamentDepth:
+        description: Глубина центральной связки (9 баллов)
         type: number
       chestWidth:
+        description: Ширина груди (9 баллов)
         type: number
       conditioning:
+        description: Упитанность (9 баллов)
         type: number
       cowID:
         type: integer
+      deceptions:
+        description: Обмускульность (9 баллов)
+        type: number
+      downSides:
+        allOf:
+        - $ref: '#/definitions/models.DownSides'
+        description: Недостатки (пороки)
       exteriorType:
+        description: Тип телосложения (9 баллов)
         type: number
       foreLegPosFront:
+        description: Постановка передних ног (9 баллов)
         type: number
       foreTeatDiameter:
+        description: Диаметр передних сосков (9 баллов)
         type: number
       foreTeatLendth:
+        description: Длина передних сосков (9 баллов)
         type: number
       foreUdderAttach:
+        description: Прикрепление передних долей вымени (9 баллов)
         type: number
       foreUdderPlcRear:
+        description: Расположение передних сосков (вид сзади) (9 баллов)
         type: number
       foreUdderWidth:
+        description: Ширина передних долей вымени вид спереди (9 баллов)
         type: number
       harmonyOfMovement:
+        description: Гармоничность движения (9 баллов)
         type: number
       heightOfUdderAttach:
+        description: Высота прикрепления задних долей вымени (9 баллов)
         type: number
       hindLegPosRead:
+        description: Постановка задних ног, вид сзади (9 баллов)
         type: number
       hindLegPosSide:
+        description: Постановка задних ног, вид сбоку (9 баллов)
         type: number
       hindTeatPlc:
+        description: "Расположение задних сосков (вид сзади) \t(9 баллов)"
         type: number
       hindUdderWidth:
+        description: Ширина задних долей вымени (9 баллов)
         type: number
       hoofAngle:
+        description: Угол наклона копытца (9 баллов)
         type: number
       id:
         type: integer
       limbs:
+        description: Конечности (100 баллов)
         type: number
+      measures:
+        allOf:
+        - $ref: '#/definitions/models.Measures'
+        description: Замеры параметров экстерьера
       milkStrength:
+        description: Молочный тип (100 баллов)
         type: number
       pelvicWidth:
+        description: Ширина таза (9 баллов)
         type: number
       picturePath:
         type: string
       prominenceOfMilkVeins:
+        description: Выраженность вен вымени (9 баллов)
         type: number
       rating:
         type: number
       rearTeatDiameter:
+        description: Диаметр задних сосков (9 баллов)
+        type: number
+      ribsAngle:
+        description: Угол наклона ребер (9 баллов)
         type: number
-      rearTeatLength:
+      sacrum:
+        description: Крестец (100 баллов) до 2025 года, эта оценка называется общий
+          вид
         type: number
       sacrumAngle:
+        description: Угол наклона крестца (9 баллов)
         type: number
       sacrumHeight:
+        description: Высота в крестце (9 баллов)
+        type: number
+      sacrumWidth:
+        description: Ширина крестца (9 баллов)
         type: number
       topLine:
+        description: Линия верха (9 баллов)
         type: number
       udder:
+        description: Вымя (100 баллов)
         type: number
       udderBalance:
+        description: Балланс вымени (9 баллов)
         type: number
       udderDepth:
+        description: Глубина вымени (9 баллов)
         type: number
     type: object
   models.Farm:
@@ -986,7 +1146,7 @@ definitions:
         description: Адрес
         type: string
       cowsCount:
-        description: количество коров
+        description: Количество коров в базе
         type: integer
       description:
         description: описание
@@ -995,13 +1155,14 @@ definitions:
         description: ID района, в котором находится хозяйство
         type: integer
       email:
-        description: эл. почта
+        description: Эл. почта
         type: string
       hozNumber:
-        description: |-
-          Region   Region `json:"-"`
-          RegionId uint
+        description: Номер хоз-ва
         type: string
+      hozPercentageInBase:
+        description: Процент хозяйств в базе
+        type: number
       id:
         type: integer
       inn:
@@ -1011,11 +1172,11 @@ definitions:
         description: Название хозяйства
         type: string
       nameShort:
-        description: Краткое название хозйства
+        description: Краткое название хозяйства
         type: string
       parrentId:
-        description: ID более управляющего хоз-ва (для хозяйства - холдинг, для фермы
-          - хозяйство)
+        description: ID управляющего хоз-ва (для хозяйства - холдинг, для фермы -
+          хозяйство)
         type: integer
       phone:
         description: телефон
@@ -1039,7 +1200,7 @@ definitions:
           $ref: '#/definitions/models.GeneticIllnessData'
         type: array
       gtcFilePath:
-        description: путь к gtc файлу относительно genmilk.ru/api/static/gtc
+        description: Путь к gtc файлу относительно genmilk.ru/api/static/gtc
         type: string
       id:
         description: ID записи о генотипировании
@@ -1053,7 +1214,7 @@ definitions:
       resultDate:
         allOf:
         - $ref: '#/definitions/models.DateOnly'
-        description: Дата получения  результата
+        description: Дата получения результата
     type: object
   models.GeneticIllness:
     properties:
@@ -1098,23 +1259,43 @@ definitions:
     type: object
   models.Grade:
     properties:
+      cowID:
+        type: integer
       ebvFat:
         description: Оценка жира по EBV
         type: number
+      ebvFatReliability:
+        description: Достоверность расчета оценки жира
+        type: number
       ebvInsemenation:
         description: Оценка кратности осеменения по EBV
         type: number
+      ebvInsemenationReliability:
+        description: Достоверность расчета оценки кратности осеменения
+        type: number
       ebvMilk:
         description: Оценка удоя по EBV
         type: number
+      ebvMilkReliability:
+        description: Достоверность расчета оценки удоя
+        type: number
       ebvProtein:
         description: Оценка белка по EBV
         type: number
-      evbService:
+      ebvProteinReliability:
+        description: Достоверность расчета оценки белка
+        type: number
+      ebvService:
         description: Оценка длительности сервисного периода по EBV
         type: number
+      ebvServiceReliability:
+        description: Достоверность расчета оценки сервисного периода
+        type: number
       generalValue:
-        description: CowID           uint
+        description: Общая оценка по EBV
+        type: number
+      generalValueReliability:
+        description: Достоверность расчета общей оценки
         type: number
       id:
         description: ID оценки
@@ -1187,7 +1368,7 @@ definitions:
         description: ID коровы, данные о лактации которой записаны
         type: integer
       days:
-        description: количество дней, когда корова дает молоко
+        description: Количество дней, когда корова дает молоко
         type: integer
       fat305:
         description: Суммарный жир за 305 дней
@@ -1223,6 +1404,54 @@ definitions:
         description: 'сервис период коровы: время от отела до осеменения'
         type: integer
     type: object
+  models.Measures:
+    properties:
+      backNippleDiameter:
+        description: Диаметр задних сосков (Сантиметры или градусы)
+        type: number
+      backUdderSegmentsLocationHeight:
+        description: Высота прикрепления задних долей вымени (Сантиметры или градусы)
+        type: number
+      backUdderSegmentsWidth:
+        description: Ширина задних долей вымени (Сантиметры или градусы)
+        type: number
+      centralLigamentDepth:
+        description: Глубина центральной связки (Сантиметры или градусы)
+        type: number
+      chestWidth:
+        description: Ширина груди (Сантиметры или градусы)
+        type: number
+      frontNippleDiameter:
+        description: Диаметр передних сосков (Сантиметры или градусы)
+        type: number
+      frontNippleLength:
+        description: Длинна передних сосков (Сантиметры или градусы)
+        type: number
+      frontUdderSegmentsLocation:
+        description: Прикрепление передних долей вымени (Сантиметры или градусы)
+        type: number
+      hindLegWalkSideView:
+        description: Поступь задних ног сбоку (Сантиметры или градусы)
+        type: number
+      hoofAngle:
+        description: Угол копыта (Сантиметры или градусы)
+        type: number
+      sacrumAngle:
+        description: Угол наклона крестца (Сантиметры или градусы)
+        type: number
+      sacrumHeight:
+        description: высота в крестце (Сантиметры или градусы)
+        type: number
+      sacrumWidth:
+        description: ширина в крестце (Сантиметры или градусы)
+        type: number
+      udderBalance:
+        description: Баланс вымени (Сантиметры или градусы)
+        type: number
+      udderDepth:
+        description: Глубина вымени (Сантиметры или градусы)
+        type: number
+    type: object
   models.News:
     properties:
       date:
@@ -1247,15 +1476,15 @@ definitions:
         description: Адрес
         type: string
       description:
-        description: описание партнера
+        description: Описание партнера
         type: string
       email:
-        description: эл. почта
+        description: Эл. почта
         type: string
       id:
         type: integer
       logoPath:
-        description: путь к логотипу партнера относительно genmlik.ru/api/static/partners
+        description: Путь к логотипу партнера относительно genmlik.ru/api/static/partners
         type: string
       name:
         description: Название партнера
@@ -1270,7 +1499,7 @@ definitions:
         default: 1
         type: integer
       name:
-        description: название региона
+        description: Название региона
         example: Усть-Каменский
         type: string
       news:
@@ -1278,7 +1507,7 @@ definitions:
           $ref: '#/definitions/models.News'
         type: array
       regNum:
-        description: номер региона (Архангельская область = 29)
+        description: Номер региона (Архангельская область = 29)
         type: integer
     type: object
   models.Role:
@@ -1286,7 +1515,7 @@ definitions:
       id:
         type: integer
       name:
-        description: название роли
+        description: Название роли
         type: string
     type: object
   models.Sex:
@@ -1310,7 +1539,7 @@ definitions:
       email:
         type: string
       hozNumber:
-        description: 'номер хоз-ва к которому привязвыается пользователь: либо существует,
+        description: 'Номер хоз-ва к которому привязвыается пользователь: либо существует,
           либо newHoz'
         type: string
       id:
@@ -1344,7 +1573,7 @@ definitions:
 externalDocs:
   description: OpenAPI
   url: https://swagger.io/resources/open-api/
-host: genmilk.ru
+host: 83.69.249.5
 info:
   contact:
     email: support@swagger.io
@@ -1788,6 +2017,77 @@ paths:
       summary: Get list of years
       tags:
       - Analytics(GeneticFilters)
+  /analitics/total/{region_id}/regionalStatistics:
+    get:
+      description: Еще не придумал что возвращает
+      parameters:
+      - description: регион по которому собиается статистика
+        in: path
+        name: region_id
+        required: true
+        type: integer
+      produces:
+      - application/json
+      responses:
+        "200":
+          description: OK
+          schema:
+            items:
+              $ref: '#/definitions/analitics.RegionalResponse'
+            type: array
+        "422":
+          description: Unprocessable Entity
+          schema:
+            type: string
+      summary: Get statistics for region
+      tags:
+      - NEW_ANALITICS
+  /analitics/total/farm/{farm_id}:
+    get:
+      description: Еще не придумал что возвращает
+      parameters:
+      - description: холдинг/хозяйство по которому собиается статистика
+        in: path
+        name: farm_id
+        required: true
+        type: integer
+      produces:
+      - application/json
+      responses:
+        "200":
+          description: OK
+          schema:
+            $ref: '#/definitions/analitics.RegionalResponse'
+        "422":
+          description: Unprocessable Entity
+          schema:
+            type: string
+      summary: Get statistics for region
+      tags:
+      - NEW_ANALITICS
+  /analitics/total/region/{region_id}:
+    get:
+      description: Еще не придумал что возвращает
+      parameters:
+      - description: регион по которому собиается статистика
+        in: path
+        name: region_id
+        required: true
+        type: integer
+      produces:
+      - application/json
+      responses:
+        "200":
+          description: OK
+          schema:
+            $ref: '#/definitions/analitics.RegionalResponse'
+        "422":
+          description: Unprocessable Entity
+          schema:
+            type: string
+      summary: Get statistics for region
+      tags:
+      - NEW_ANALITICS
   /auth/checkEmail:
     get:
       consumes:
@@ -2194,8 +2494,13 @@ paths:
       - Cows
   /cows/{id}/grades:
     get:
-      description: Возращает словарь с двумя ключам "ByRegion" - оценки по региону
-        и "ByHoz" - оценки по хозяйству
+      description: |-
+        Возращает словарь с ключами:
+        1. ByRegion - Значения оценок EBV по региону
+        2. ByHoz - Значения оценок EBV по хозяйству
+        3. ByCountry - Значения оценок EBV по стране
+        4. Average - Средние значения оценок EBV
+        5. PercentsRegion - Отклонение оценок от среднего значения для региона
       parameters:
       - description: ID коровы для которой ищутся оценки
         in: path
@@ -2385,6 +2690,7 @@ paths:
       - Districts
   /farms:
     get:
+      deprecated: true
       description: Возращает список ферм. Разрешает отсутсвие фильтров
       parameters:
       - description: ID более главной фермы, null для поиска холдингов
@@ -2438,6 +2744,63 @@ paths:
       summary: Get farm
       tags:
       - Farms
+  /farms/farm:
+    get:
+      description: Возвращает список всех ферм
+      produces:
+      - application/json
+      responses:
+        "200":
+          description: OK
+          schema:
+            items:
+              $ref: '#/definitions/models.Farm'
+            type: array
+        "500":
+          description: Internal Server Error
+          schema:
+            type: string
+      summary: Get list of Farms
+      tags:
+      - Farms
+  /farms/hold:
+    get:
+      description: Возвращает список всех холдингов
+      produces:
+      - application/json
+      responses:
+        "200":
+          description: OK
+          schema:
+            items:
+              $ref: '#/definitions/models.Farm'
+            type: array
+        "500":
+          description: Internal Server Error
+          schema:
+            type: string
+      summary: Get list of holdings
+      tags:
+      - Farms
+  /farms/hoz:
+    get:
+      description: Возвращает список всех хозяйств
+      produces:
+      - application/json
+      responses:
+        "200":
+          description: OK
+          schema:
+            items:
+              $ref: '#/definitions/models.Farm'
+            type: array
+        "500":
+          description: Internal Server Error
+          schema:
+            type: string
+      summary: Get list of Hoz
+      tags:
+      - Farms
   /lactations/{id}:
     get:
       description: Возращает конкретную лактацию
@@ -2578,7 +2941,7 @@ paths:
             type: string
       summary: Get farm by region id
       tags:
-      - Regions
+      - zzDeprecated
   /regions/{id}/news:
     get:
       description: Возращает новости региона
@@ -2686,6 +3049,27 @@ paths:
       summary: Get list of sexes
       tags:
       - User
+  /user/whoami:
+    get:
+      description: Рут вернет данные о пользователе из БД
+      produces:
+      - application/json
+      responses:
+        "200":
+          description: OK
+          schema:
+            type: string
+        "401":
+          description: Unauthorized
+          schema:
+            type: string
+        "500":
+          description: Internal Server Error
+          schema:
+            type: string
+      summary: Получить информацию о пользователе
+      tags:
+      - User
 securityDefinitions:
   BasicAuth:
     type: basic
diff --git a/server/filters/cows_filter/all_filters.go b/server/filters/cows_filter/all_filters.go
index 951ccae..b0606a5 100644
--- a/server/filters/cows_filter/all_filters.go
+++ b/server/filters/cows_filter/all_filters.go
@@ -31,4 +31,6 @@ var ALL_FILTERS = []filters.Filter{
 	LiveInDistrict{},
 	LiveInHolding{},
 	LiveInRegion{},
+	ByEbvRegionGeneralValue{},
+	ByIncludeOnlyFilter{},
 }
diff --git a/server/filters/cows_filter/by_ebv_region_general_value.go b/server/filters/cows_filter/by_ebv_region_general_value.go
new file mode 100644
index 0000000..1241055
--- /dev/null
+++ b/server/filters/cows_filter/by_ebv_region_general_value.go
@@ -0,0 +1,28 @@
+package cows_filter
+
+import (
+	"cow_backend/filters"
+	"errors"
+)
+
+type ByEbvRegionGeneralValue struct {
+}
+
+func (f ByEbvRegionGeneralValue) Apply(fm filters.FilteredModel) error {
+	query := fm.GetQuery()
+	bodyData, ok := fm.GetFilterParameters()["object"].(CowsFilter)
+	if !ok {
+		return errors.New("wrong object provided in filter filed object")
+	}
+	if bodyData.EbvGeneralValueRegionTo != nil && bodyData.EbvGeneralValueRegionFrom != nil {
+		query = query.Where("EXISTS (SELECT 1 from grade_regions where cow_id = cows.id AND general_value BETWEEN ? AND ?)",
+			*bodyData.EbvGeneralValueRegionFrom,
+			*bodyData.EbvGeneralValueRegionTo).Preload("GradeRegion")
+	} else if bodyData.EbvGeneralValueRegionTo != nil {
+		query = query.Where("EXISTS (SELECT 1 from grade_regions where cow_id = cows.id AND general_value <= ?)", *bodyData.EbvGeneralValueRegionTo).Preload("GradeRegion")
+	} else if bodyData.EbvGeneralValueRegionFrom != nil {
+		query = query.Where("EXISTS (SELECT 1 from grade_regions where cow_id = cows.id AND general_value >= ?)", *bodyData.EbvGeneralValueRegionFrom).Preload("GradeRegion")
+	}
+	fm.SetQuery(query)
+	return nil
+}
diff --git a/server/filters/cows_filter/by_hoz.go b/server/filters/cows_filter/by_hoz.go
index 64b0979..1cd696a 100644
--- a/server/filters/cows_filter/by_hoz.go
+++ b/server/filters/cows_filter/by_hoz.go
@@ -2,6 +2,7 @@ package cows_filter
 
 import (
 	"cow_backend/filters"
+	"cow_backend/models"
 	"errors"
 )
 
@@ -15,7 +16,16 @@ func (f ByHoz) Apply(fm filters.FilteredModel) error {
 		return errors.New("wrong object provided in filter filed object")
 	}
 	if bodyData.HozId != nil {
-		query = query.Where("farm_group_id = ?", bodyData.HozId).Preload("Farm")
+		hoz := []uint{}
+		db := models.GetDb()
+		if err := db.Model(&models.Farm{}).Where(map[string]any{
+			"parrent_id": bodyData.HozId,
+			"type":       []uint{1, 2},
+		}).Pluck("id", &hoz).Error; err != nil {
+			return err
+		}
+		hoz = append(hoz, *bodyData.HozId)
+		query = query.Where(map[string]any{"farm_group_id": hoz}).Preload("Farm")
 	}
 	fm.SetQuery(query)
 	return nil
diff --git a/server/filters/cows_filter/by_include_only.go b/server/filters/cows_filter/by_include_only.go
new file mode 100644
index 0000000..1923788
--- /dev/null
+++ b/server/filters/cows_filter/by_include_only.go
@@ -0,0 +1,25 @@
+package cows_filter
+
+import (
+	"cow_backend/filters"
+)
+
+type ByIncludeOnlyFilter struct{}
+
+func (f ByIncludeOnlyFilter) Apply(fm filters.FilteredModel) error {
+	query := fm.GetQuery()
+
+	filterData, ok := fm.GetFilterParameters()["object"].(CowsFilter)
+	if !ok {
+		return nil
+	}
+
+	if len(filterData.IncludeOnly) == 0 {
+		return nil
+	}
+
+	query = query.Where(map[string]any{"cows.id": filterData.IncludeOnly})
+
+	fm.SetQuery(query)
+	return nil
+}
diff --git a/server/filters/cows_filter/filter_object.go b/server/filters/cows_filter/filter_object.go
index c913d7d..77fe632 100644
--- a/server/filters/cows_filter/filter_object.go
+++ b/server/filters/cows_filter/filter_object.go
@@ -49,7 +49,12 @@ type CowsFilter struct { // Фильтр коров
 	CreatedAtFrom *string `validate:"optional"` // Фильтр по дате внесения записи в БД ОТ
 	CreatedAtTo   *string `validate:"optional"` // Фильтр по дате внесения записи в БД ДО
 
-	OrderBy     *string // Может принимать следующие и только следующие значения: null, "RSHN", "InventoryNumber", "Name", "HozName", "BirthDate"
+	OrderBy     *string // Может принимать следующие и только следующие значения: null, "RSHN", "InventoryNumber", "Name", "HozName", "BirthDate", "GeneralEbvRegion"
 	OrderByDesc *bool   // true - в порядке убывания, false - в порядке возрастания
 	RegionId    *uint   // по региону
+
+	EbvGeneralValueRegionFrom *float64 `example:"3.14" validate:"optional"`
+	EbvGeneralValueRegionTo   *float64 `example:"3.14" validate:"optional"`
+
+	IncludeOnly []uint // ID коров, которые могут быть в выдаче фильтра. Пустой = ВСЕ коровы
 }
diff --git a/server/filters/cows_filter/order_by.go b/server/filters/cows_filter/order_by.go
index 34bccdd..704b3af 100644
--- a/server/filters/cows_filter/order_by.go
+++ b/server/filters/cows_filter/order_by.go
@@ -9,16 +9,18 @@ type OrderBy struct {
 }
 
 var orderingsDesc = map[string]string{
-	"RSHN":            "rshn_number desc",
-	"InventoryNumber": "inventory_number desc",
-	"Name":            "name desc",
-	"BirthDate":       "birth_date desc",
+	"RSHN":             "rshn_number desc NULLS LAST",
+	"InventoryNumber":  "inventory_number desc NULLS LAST",
+	"Name":             "name desc NULLS LAST",
+	"BirthDate":        "birth_date desc NULLS LAST",
+	"GeneralEbvRegion": "\"GradeRegion\".general_value desc NULLS LAST",
 }
 var orderingsAsc = map[string]string{
-	"RSHN":            "rshn_number asc",
-	"InventoryNumber": "inventory_number asc",
-	"Name":            "name asc",
-	"BirthDate":       "birth_date asc",
+	"RSHN":             "rshn_number asc NULLS LAST",
+	"InventoryNumber":  "inventory_number asc NULLS LAST",
+	"Name":             "name asc NULLS LAST",
+	"BirthDate":        "birth_date asc NULLS LAST",
+	"GeneralEbvRegion": "\"GradeRegion\".general_value asc NULLS LAST",
 }
 
 func (f OrderBy) Apply(fm filters.FilteredModel) error {
@@ -42,7 +44,7 @@ func (f OrderBy) Apply(fm filters.FilteredModel) error {
 				return nil
 			}
 		}
-		query = query.Order(orderStr)
+		query = query.Joins("GradeRegion").Order(orderStr)
 	}
 
 	fm.SetQuery(query)
diff --git a/server/go.mod b/server/go.mod
index 76f4f72..017c7bf 100644
--- a/server/go.mod
+++ b/server/go.mod
@@ -6,10 +6,13 @@ require (
 	github.com/gin-gonic/gin v1.10.0
 	github.com/golang-jwt/jwt v3.2.2+incompatible
 	github.com/golang-jwt/jwt/v4 v4.5.1
+	github.com/gorilla/sessions v1.4.0
 	github.com/joho/godotenv v1.5.1
+	github.com/lib/pq v1.10.9
 	github.com/swaggo/files v1.0.1
 	github.com/swaggo/gin-swagger v1.6.0
 	github.com/swaggo/swag v1.16.4
+	golang.org/x/crypto v0.29.0
 	gorm.io/driver/postgres v1.5.10
 	gorm.io/gorm v1.25.12
 )
@@ -31,7 +34,6 @@ require (
 	github.com/go-playground/validator/v10 v10.23.0 // indirect
 	github.com/goccy/go-json v0.10.3 // indirect
 	github.com/gorilla/securecookie v1.1.2 // indirect
-	github.com/gorilla/sessions v1.4.0 // indirect
 	github.com/jackc/pgpassfile v1.0.0 // indirect
 	github.com/jackc/pgservicefile v0.0.0-20221227161230-091c0ba34f0a // indirect
 	github.com/jackc/pgx/v5 v5.5.5 // indirect
@@ -51,7 +53,6 @@ require (
 	github.com/twitchyliquid64/golang-asm v0.15.1 // indirect
 	github.com/ugorji/go/codec v1.2.12 // indirect
 	golang.org/x/arch v0.12.0 // indirect
-	golang.org/x/crypto v0.29.0 // indirect
 	golang.org/x/net v0.31.0 // indirect
 	golang.org/x/sync v0.9.0 // indirect
 	golang.org/x/sys v0.27.0 // indirect
diff --git a/server/go.sum b/server/go.sum
index 7f6ab61..e80a6a8 100644
--- a/server/go.sum
+++ b/server/go.sum
@@ -45,6 +45,8 @@ github.com/golang-jwt/jwt/v4 v4.5.1/go.mod h1:m21LjoU+eqJr34lmDMbreY2eSTRJ1cv77w
 github.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=
 github.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=
 github.com/google/gofuzz v1.0.0/go.mod h1:dBl0BpW6vV/+mYPU4Po3pmUjxk6FQPldtuIdl/M65Eg=
+github.com/google/gofuzz v1.2.0 h1:xRy4A+RhZaiKjJ1bPfwQ8sedCA+YS2YcCHW6ec7JMi0=
+github.com/google/gofuzz v1.2.0/go.mod h1:dBl0BpW6vV/+mYPU4Po3pmUjxk6FQPldtuIdl/M65Eg=
 github.com/gorilla/securecookie v1.1.2 h1:YCIWL56dvtr73r6715mJs5ZvhtnY73hBvEF8kXD8ePA=
 github.com/gorilla/securecookie v1.1.2/go.mod h1:NfCASbcHqRSY+3a8tlWJwsQap2VX5pwzwo4h3eOamfo=
 github.com/gorilla/sessions v1.4.0 h1:kpIYOp/oi6MG/p5PgxApU8srsSw9tuFbt46Lt7auzqQ=
@@ -77,6 +79,8 @@ github.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=
 github.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=
 github.com/leodido/go-urn v1.4.0 h1:WT9HwE9SGECu3lg4d/dIA+jxlljEa1/ffXKmRjqdmIQ=
 github.com/leodido/go-urn v1.4.0/go.mod h1:bvxc+MVxLKB4z00jd1z+Dvzr47oO32F/QSNjSBOlFxI=
+github.com/lib/pq v1.10.9 h1:YXG7RB+JIjhP29X+OtkiDnYaXQwpS4JEWq7dtCCRUEw=
+github.com/lib/pq v1.10.9/go.mod h1:AlVN5x4E4T544tWzH6hKfbfQvm3HdbOxrmggDNAPY9o=
 github.com/mailru/easyjson v0.7.7 h1:UGYAvKxe3sBsEDzO8ZeWOSlIQfWFlxbzLZe7hwFURr0=
 github.com/mailru/easyjson v0.7.7/go.mod h1:xzfreul335JAWq5oZzymOObrkdz5UnU4kGfJJLY9Nlc=
 github.com/mattn/go-isatty v0.0.20 h1:xfD0iDuEKnDkl03q4limB+vH+GxLEtL/jb4xVJSWWEY=
diff --git a/server/models/blup_statistics.go b/server/models/blup_statistics.go
new file mode 100644
index 0000000..5c170ac
--- /dev/null
+++ b/server/models/blup_statistics.go
@@ -0,0 +1,47 @@
+package models
+
+import "time"
+
+type BlupStatistics struct {
+	ID        uint `gorm:"primaryKey"`
+	CreatedAt time.Time
+
+	AverageEbvGeneralValueRegion float64 // средняя Оценка общая по EBV
+	AverageEbvMilkRegion         float64 // средняя Оценка удоя по EBV
+	AverageEbvFatRegion          float64 // средняя Оценка жира по EBV
+	AverageEbvProteinRegion      float64 // средняя Оценка белка по EBV
+	AverageEbvInsemenationRegion float64 // средняя Оценка кратности осеменения по EBV
+	AverageEbvServiceRegion      float64 // средняя Оценка длительности сервисного периода по EBV
+
+	MinEbvGeneralValueRegion float64 // минимальная Оценка общая по EBV
+	MinEbvMilkRegion         float64 // минимальная Оценка удоя по EBV
+	MinEbvFatRegion          float64 // минимальная Оценка жира по EBV
+	MinEbvProteinRegion      float64 // минимальная Оценка белка по EBV
+	MinEbvInsemenationRegion float64 // минимальная Оценка кратности осеменения по EBV
+	MinEbvServiceRegion      float64 // минимальная Оценка длительности сервисного периода по EBV
+
+	MaxEbvGeneralValueRegion float64 // максимальная Оценка общая по EBV
+	MaxEbvMilkRegion         float64 // максимальная Оценка удоя по EBV
+	MaxEbvFatRegion          float64 // максимальная Оценка жира по EBV
+	MaxEbvProteinRegion      float64 // максимальная Оценка белка по EBV
+	MaxEbvInsemenationRegion float64 // максимальная Оценка кратности осеменения по EBV
+	MaxEbvServiceRegion      float64 // максимальная Оценка длительности сервисного периода по EBV
+
+	MinEbvMastit              float64 // макс. оценка мастита
+	MinEbvFatPercents         float64
+	MinEbvProteinPercents     float64
+	MinEbvSomaticNucs         float64
+	MinEbvProductiveLongevity float64
+
+	MaxEbvMastit              float64
+	MaxEbvFatPercents         float64
+	MaxEbvProteinPercents     float64
+	MaxEbvSomaticNucs         float64
+	MaxEbvProductiveLongevity float64
+
+	AverageEbvMastit              float64
+	AverageEbvFatPercents         float64
+	AverageEbvProteinPercents     float64
+	AverageEbvSomaticNucs         float64
+	AverageEbvProductiveLongevity float64
+}
diff --git a/server/models/cow.go b/server/models/cow.go
index 97658ae..e1c5d20 100644
--- a/server/models/cow.go
+++ b/server/models/cow.go
@@ -12,28 +12,28 @@ type Cow struct {
 	ID        uint      `gorm:"primaryKey" example:"1"` // ID коровы
 	CreatedAt time.Time `example:"2007-01-01"`          // Время создания коровы в базе данных
 
-	Farm   *Farm `json:"-"`
+	Farm   *Farm `json:"-" gorm:"constraint:OnUpdate:CASCADE,OnDelete:SET NULL;"`
 	FarmID *uint `gorm:"index" example:"1"` // ID фермы, которой корова принадлежит
 
-	FarmGroup   Farm `json:"-"`
+	FarmGroup   Farm `json:"-" gorm:"constraint:OnUpdate:CASCADE,OnDelete:RESTRICT;"`
 	FarmGroupId uint `gorm:"index" example:"1"` // ID хозяйства, которому корова принадлежит
 
-	Holding   *Farm
+	Holding   *Farm `gorm:"constraint:OnUpdate:CASCADE,OnDelete:SET NULL;"`
 	HoldingID *uint `gorm:"index"` // ID холдинга, которому принадлежит корова
 
-	Breed   Breed `json:"-"`
+	Breed   Breed `json:"-" gorm:"constraint:OnUpdate:CASCADE,OnDelete:RESTRICT;"`
 	BreedId uint  `gorm:"index" example:"1"` // ID породы коровы
 
-	Sex   Sex  `json:"-"`
+	Sex   Sex  `json:"-" gorm:"constraint:OnUpdate:CASCADE,OnDelete:RESTRICT;"`
 	SexId uint `gorm:"index" example:"1"` // ID пола коровы
 
-	Events []Event `json:"-"`
+	Events []Event `json:"-" gorm:"constraint:OnUpdate:CASCADE,OnDelete:CASCADE;"`
 
-	GradeRegion   *Grade `json:"-"`
-	GradeRegionId *uint  `example:"1"` // Оценка по региону
+	GradeRegion *GradeRegion `json:"-" gorm:"constraint:OnUpdate:CASCADE,OnDelete:CASCADE;"`
 
-	GradeHoz   *Grade `json:"-"`
-	GradeHozId *uint  `example:"1"` // Оценка по хозяйству
+	GradeHoz *GradeHoz `json:"-" gorm:"constraint:OnUpdate:CASCADE,OnDelete:CASCADE;"`
+
+	GradeCountry *GradeCountry `json:"-" gorm:"constraint:OnUpdate:CASCADE,OnDelete:CASCADE;"`
 
 	FatherSelecs *uint64 // ID коровы отца коровы
 
@@ -42,9 +42,9 @@ type Cow struct {
 	// CreatedBy   *User `json:"-"` // пользователь, создавший корову
 	// CreatedByID *uint `example:"1"`
 
-	Genetic   *Genetic
-	Exterior  *Exterior
-	Lactation []Lactation `json:"-"`
+	Genetic   *Genetic    `gorm:"constraint:OnUpdate:CASCADE,OnDelete:CASCADE;"`
+	Exterior  *Exterior   `gorm:"constraint:OnUpdate:CASCADE,OnDelete:CASCADE;"`
+	Lactation []Lactation `json:"-" gorm:"constraint:OnUpdate:CASCADE,OnDelete:CASCADE;"`
 
 	IdentificationNumber *string `gorm:"index"`                      // Он все-таки есть! Это какой-то не российский номер коровы
 	InventoryNumber      *string `gorm:"index" example:"1213321"`    // Инвентарный номер коровы
@@ -56,37 +56,38 @@ type Cow struct {
 	InbrindingCoeffByFamily *float64 `gorm:"index" example:"3.14"` // Коэф. инбриндинга по роду
 
 	Approved    int       `gorm:"index" example:"1"` // Целое число, 0 - корова не подтверждена, 1 - корова подтверждена, -1 - корова отклонена
-	BirthDate   DateOnly  `gorm:"index"`             // День рождения
+	BirthDate   *DateOnly `gorm:"index"`             // День рождения
 	DepartDate  *DateOnly `gorm:"index"`             // День отбытия из коровника
 	DeathDate   *DateOnly `gorm:"index"`             // Дата смерти
 	BirkingDate *DateOnly `gorm:"index"`             // Дата перебирковки
 
 	// Новые поля
-	PreviousHoz   *Farm   `json:"-"`
+	PreviousHoz   *Farm   `json:"-" gorm:"constraint:OnUpdate:CASCADE,OnDelete:SET NULL;"`
 	PreviousHozId *uint   // ID предыдущего хозяйства, когда корову продают, она переходит к новому владельцу и становится "новой коровой"
-	BirthHoz      *Farm   `json:"-"`
+	BirthHoz      *Farm   `json:"-" gorm:"constraint:OnUpdate:CASCADE,OnDelete:SET NULL;"`
 	BirthHozId    *uint   // ID хозяйства рождения
 	BirthMethod   *string // Способ зачатия: клон, эмбрион, искусственное осеменени, естественное осеменение
 
 	PreviousInventoryNumber *string `json:"-"` // Одна и та же реальная корова имеет разные инвент. номера, это предыдущий селекс коровы
 
-	Documents []Document `json:"-"` // Документы коровы
+	Documents []Document `json:"-" gorm:"constraint:OnUpdate:CASCADE,OnDelete:CASCADE;"` // Документы коровы
 }
 
 type Document struct {
 	ID    uint   // ID
-	CowID uint   `gorm:"index"` // ID коровы, для которой хранитя документ
+	CowID uint   `gorm:"index;"` // ID коровы, для которой хранитя документ
 	Path  string // Путь к документу относительно genmilk.ru/api/static/documents
 }
 
 func (c *Cow) Validate() error {
-	if c.DepartDate != nil && c.DepartDate.Before(c.BirthDate.Time) {
+	return nil
+	if c.DepartDate != nil && c.BirthDate != nil && c.DepartDate.Before(c.BirthDate.Time) {
 		return errors.New("дата выбытия не может быть меньше даты рождения")
 	}
-	if c.DeathDate != nil && c.DeathDate.Before(c.BirthDate.Time) {
+	if c.DeathDate != nil && c.BirthDate != nil && c.DeathDate.Before(c.BirthDate.Time) {
 		return errors.New("дата смерти не может быть меньше даты рождения")
 	}
-	if c.BirkingDate != nil && c.BirkingDate.Before(c.BirthDate.Time) {
+	if c.BirkingDate != nil && c.BirthDate != nil && c.BirkingDate.Before(c.BirthDate.Time) {
 		return errors.New("дата перебирковки не может быть меньше даты рождения")
 	}
 	return nil
diff --git a/server/models/district.go b/server/models/district.go
index b485482..c323f27 100644
--- a/server/models/district.go
+++ b/server/models/district.go
@@ -2,7 +2,7 @@ package models
 
 type District struct {
 	ID       uint   `gorm:"primaryKey"` // ID района
-	Region   Region `json:"-"`
+	Region   Region `json:"-" gorm:"constraint:OnUpdate:CASCADE,OnDelete:RESTRICT;"`
 	RegionId uint   `gorm:"index"` // ID региона. в котором район
 	Name     string // Название района
 }
diff --git a/server/models/events.go b/server/models/events.go
index 19fed5b..ea80ca9 100644
--- a/server/models/events.go
+++ b/server/models/events.go
@@ -10,31 +10,34 @@ type Event struct {
 
 	CowId uint `gorm:"index"` // ID коровы
 
-	EventType   EventType
-	EventTypeId uint `gorm:"index"` // Стандартизированная группа события
+	EventType   EventType `gorm:"constraint:OnUpdate:CASCADE,OnDelete:RESTRICT"`
+	EventTypeId uint      `gorm:"index"` // Стандартизированная группа события
 
-	EventType1   EventType
-	EventType1Id uint `gorm:"index"` // Стандартизированная название события
+	EventType1   EventType `gorm:"constraint:OnUpdate:CASCADE,OnDelete:RESTRICT"`
+	EventType1Id uint      `gorm:"index"` // Стандартизированная название события
 
-	EventType2   *EventType
-	EventType2Id *uint `gorm:"index"` // Стандартизированное разновидность события
+	EventType2   *EventType `gorm:"constraint:OnUpdate:CASCADE,OnDelete:RESTRICT"`
+	EventType2Id *uint      `gorm:"index"` // Стандартизированное разновидность события
 
 	DataResourse      *string // Источник данных
 	DaysFromLactation uint    // Дни от начала лактации
 
-	Date     DateOnly `gorm:"index"` // Дата ветеринарного события
-	Comment1 *string  // Комментарий 1 (по всей видимости сюда что-то пришит врач)
-	Comment2 *string  // Комментарий 2
+	Date     *DateOnly `gorm:"index"` // Дата ветеринарного события
+	Comment1 *string   // Комментарий 1 (по всей видимости сюда что-то пришит врач)
+	Comment2 *string   // Комментарий 2
 }
 
 func (e *Event) Validate() error {
+	return nil
 	db := dbConnection
 	cow := Cow{}
 	if err := db.First(&cow, e.CowId).Error; err != nil {
 		return errors.New("не найдена корова, для которой добавляется вет. событие")
 	}
-	if cow.BirthDate.After(e.Date.Time) {
-		return errors.New("вет. событие не может случиться до рождения коровы")
+	if e.Date != nil {
+		if cow.BirthDate.After(e.Date.Time) {
+			return errors.New("вет. событие не может случиться до рождения коровы")
+		}
 	}
 	return nil
 }
@@ -50,7 +53,7 @@ func (e *Event) BeforeUpdate(tx *gorm.DB) error {
 type EventType struct { // бывший EventList
 	ID uint `gorm:"primaryKey"`
 
-	Parent   *EventType `json:"-"`
+	Parent   *EventType `json:"-" gorm:"constraint:OnUpdate:CASCADE,OnDelete:RESTRICT"`
 	ParentId *uint      // ID старшего в иерархии типов события типа (для разновидности события ID группы событий, которой эта разновидность принадлежит)
 
 	Name string // Название группы/названия/разновидности события
diff --git a/server/models/exterion_additional.go b/server/models/exterion_additional.go
new file mode 100644
index 0000000..a7e2007
--- /dev/null
+++ b/server/models/exterion_additional.go
@@ -0,0 +1,15 @@
+package models
+
+type AdditionalInfo struct {
+	ID         uint `gorm:"primary_key" json:"-"`
+	ExteriorID uint `json:"-" gorm:"index"`
+
+	AdditionalProperty1Name string // Дополнительный параметр 1 (название)
+	AdditionalProperty2Name string // Дополнительный параметр 2 (название)
+
+	AdditionalProperty1Value string // Дополнительный параметр 1 (значение в баллах)
+	AdditionalProperty2Value string // Дополнительный параметр 2 (значение в баллах)
+
+	AdditionalProperty1Measure string // Дополнительный параметр 1 (значение в единицах измерения)
+	AdditionalProperty2Measure string // Дополнительный параметр 2 (значение в единицах измерения)
+}
diff --git a/server/models/exterior.go b/server/models/exterior.go
index 65eb64b..3ff94da 100644
--- a/server/models/exterior.go
+++ b/server/models/exterior.go
@@ -2,50 +2,62 @@ package models
 
 import (
 	"errors"
+
 	"gorm.io/gorm"
 )
 
 type Exterior struct {
-	ID                    uint `gorm:"primaryKey"`
-	CowID                 uint `gorm:"index"`
-	Rating                float64
-	ChestWidth            *float64
-	PelvicWidth           *float64
-	SacrumHeight          *float64
-	BodyDepth             *float64
-	ExteriorType          *float64
-	BoneQHockJointRear    *float64
-	SacrumAngle           *float64
-	TopLine               *float64
-	HoofAngle             *float64
-	HindLegPosSide        *float64
-	HindLegPosRead        *float64
-	ForeLegPosFront       *float64
-	UdderDepth            *float64
-	UdderBalance          *float64
-	HeightOfUdderAttach   *float64
-	ForeUdderAttach       *float64
-	ForeUdderPlcRear      *float64
-	HindTeatPlc           *float64
-	ForeTeatLendth        *float64
-	RearTeatLength        *float64
-	ForeTeatDiameter      *float64
-	RearTeatDiameter      *float64
-	CenterLigamentDepth   *float64
-	HarmonyOfMovement     *float64
-	Conditioning          *float64
-	ProminenceOfMilkVeins *float64
-
-	// 100 бальные
-	MilkStrength  *float64
-	BodyStructure *float64
-	Limbs         *float64
-	Udder         *float64
-	// 100 бальные
-
-	ForeUdderWidth *float64
-	HindUdderWidth *float64
-	AcrumLength    *float64
+	ID     uint `gorm:"primaryKey"`
+	CowID  uint `gorm:"index;"`
+	Rating float64
+
+	Measures       Measures        `gorm:"constraint:OnUpdate:CASCADE,OnDelete:Cascade;"` // Замеры параметров экстерьера
+	DownSides      *DownSides      `gorm:"constraint:OnUpdate:CASCADE,OnDelete:CASCADE;"` // Недостатки (пороки)
+	AdditionalInfo *AdditionalInfo `gorm:"constraint:OnUpdate:CASCADE,OnDelete:CASCADE;"` // Доп. признаки
+	AssessmentDate *DateOnly
+
+	BodyDepth    *float64 // Глубина туловища (9 баллов)
+	ChestWidth   *float64 // Ширина груди (9 баллов)
+	ExteriorType *float64 // Тип телосложения (9 баллов)
+
+	RibsAngle   *float64 // Угол наклона ребер (9 баллов)
+	SacrumAngle *float64 // Угол наклона крестца (9 баллов)
+
+	SacrumHeight    *float64 // Высота в крестце (9 баллов)
+	SacrumWidth     *float64 // Ширина крестца (9 баллов)
+	Conditioning    *float64 // Упитанность (9 баллов)
+	ForeLegPosFront *float64 // Постановка передних ног (9 баллов)
+	HindLegPosSide  *float64 // Постановка задних ног, вид сбоку (9 баллов)
+	HindLegPosRead  *float64 // Постановка задних ног, вид сзади (9 баллов)
+	HoofAngle       *float64 // Угол наклона копытца (9 баллов)
+
+	HarmonyOfMovement     *float64 // Гармоничность движения (9 баллов)
+	UdderDepth            *float64 // Глубина вымени (9 баллов)
+	ForeUdderAttach       *float64 // Прикрепление передних долей вымени (9 баллов)
+	HeightOfUdderAttach   *float64 // Высота прикрепления задних долей вымени (9 баллов)
+	HindUdderWidth        *float64 // Ширина задних долей вымени (9 баллов)
+	CenterLigamentDepth   *float64 // Глубина центральной связки (9 баллов)
+	ForeUdderPlcRear      *float64 // Расположение передних сосков (вид сзади) (9 баллов)
+	HindTeatPlc           *float64 // Расположение задних сосков (вид сзади) 	(9 баллов)
+	ForeTeatLendth        *float64 // Длина передних сосков (9 баллов)
+	BoneQHockJointRear    *float64 // Качество костяка (9 баллов)
+	Deceptions            *float64 // Обмускульность (9 баллов)
+	AcrumLength           *float64 // Длина крестца (9 баллов)
+	TopLine               *float64 // Линия верха (9 баллов)
+	UdderBalance          *float64 // Балланс вымени (9 баллов)
+	ForeTeatDiameter      *float64 // Диаметр передних сосков (9 баллов)
+	RearTeatDiameter      *float64 // Диаметр задних сосков (9 баллов)
+	ProminenceOfMilkVeins *float64 // Выраженность вен вымени (9 баллов)
+
+	PelvicWidth *float64 // Ширина таза (9 баллов)
+
+	ForeUdderWidth *float64 // Ширина передних долей вымени вид спереди (9 баллов)
+
+	MilkStrength  *float64 // Молочный тип (100 баллов)
+	BodyStructure *float64 // Туловище (100 баллов)
+	Limbs         *float64 // Конечности (100 баллов)
+	Udder         *float64 // Вымя (100 баллов)
+	Sacrum        *float64 // Крестец (100 баллов) до 2025 года, эта оценка называется общий вид
 
 	PicturePath *string
 }
@@ -53,6 +65,7 @@ type Exterior struct {
 // Validate
 // 100 строк, 100, Карл!
 func (e *Exterior) Validate() error {
+	return nil
 	if e.MilkStrength != nil && (*e.MilkStrength < 0 || *e.MilkStrength > 100) {
 		return errors.New("milkStrength must be between 0 and 100")
 	}
@@ -123,9 +136,6 @@ func (e *Exterior) Validate() error {
 	if e.ForeTeatLendth != nil && (*e.ForeTeatLendth < 0 || *e.ForeTeatLendth > 10) {
 		return errors.New("foreTeatLength must be between 0 and 10")
 	}
-	if e.RearTeatLength != nil && (*e.RearTeatLength < 0 || *e.RearTeatLength > 10) {
-		return errors.New("rearTeatLength must be between 0 and 10")
-	}
 	if e.ForeTeatDiameter != nil && (*e.ForeTeatDiameter < 0 || *e.ForeTeatDiameter > 10) {
 		return errors.New("foreTeatDiameter must be between 0 and 10")
 	}
diff --git a/server/models/exterior_downsides.go b/server/models/exterior_downsides.go
new file mode 100644
index 0000000..336848c
--- /dev/null
+++ b/server/models/exterior_downsides.go
@@ -0,0 +1,23 @@
+package models
+
+// DownSides
+// Поля количество сделаны числами с плавающей запятой из предположения, что когда-нибудь кто-нибудь подумает, что
+// недостаток "рак матки" сильно критичнее, чем недостаток "некрасивый окрас"
+type DownSides struct {
+	ID         uint `gorm:"primary_key" json:"-"`
+	ExteriorID uint `json:"-" gorm:"index"`
+
+	MilkTypeCount float64 // Молочный тип
+	BodyCount     float64 // Туловище
+	LimbsCount    float64 // Конечности
+	UdderCount    float64 // Вымя
+	SacrumCount   float64 // Крестец
+
+	MilkTypeDescription string // Список недостатков Молочного типа. Разделитель: "/"
+	BodyDescription     string // Список недостатков туловища разделитель: "/"
+	LimbsDescription    string // Список недостатков конечностей разделитель: "/"
+	UdderDescription    string // Список недостатков вымени разделитель: "/"
+	SacrumDescription   string // Список недостатков крестца разделитель: "/"
+
+	Summary string // Сводные данные о недостатках разделитель "/"
+}
diff --git a/server/models/exterior_measures.go b/server/models/exterior_measures.go
new file mode 100644
index 0000000..759ead8
--- /dev/null
+++ b/server/models/exterior_measures.go
@@ -0,0 +1,25 @@
+package models
+
+type Measures struct {
+	ID         uint `gorm:"primaryKey" json:"-"`
+	ExteriorID uint `json:"-" gorm:"index"`
+
+	SacrumHeight *float64 // высота в крестце (Сантиметры или градусы)
+	ChestWidth   *float64 // Ширина груди (Сантиметры или градусы)
+	SacrumAngle  *float64 // Угол наклона крестца (Сантиметры или градусы)
+	SacrumWidth  *float64 // ширина в крестце (Сантиметры или градусы)
+
+	HindLegWalkSideView *float64 // Поступь задних ног сбоку (Сантиметры или градусы)
+	HoofAngle           *float64 // Угол копыта (Сантиметры или градусы)
+
+	UdderDepth                      *float64 // Глубина вымени (Сантиметры или градусы)
+	FrontUdderSegmentsLocation      *float64 // Прикрепление передних долей вымени (Сантиметры или градусы)
+	BackUdderSegmentsLocationHeight *float64 // Высота прикрепления задних долей вымени (Сантиметры или градусы)
+	BackUdderSegmentsWidth          *float64 // Ширина задних долей вымени (Сантиметры или градусы)
+	CentralLigamentDepth            *float64 // Глубина центральной связки (Сантиметры или градусы)
+	FrontNippleLength               *float64 // Длинна передних сосков (Сантиметры или градусы)
+
+	UdderBalance        *float64 // Баланс вымени (Сантиметры или градусы)
+	FrontNippleDiameter *float64 // Диаметр передних сосков (Сантиметры или градусы)
+	BackNippleDiameter  *float64 // Диаметр задних сосков (Сантиметры или градусы)
+}
diff --git a/server/models/farm.go b/server/models/farm.go
index f41a871..28c78b1 100644
--- a/server/models/farm.go
+++ b/server/models/farm.go
@@ -9,34 +9,34 @@ import (
 type Farm struct {
 	ID uint `gorm:"primaryKey"`
 
-	// Region   Region `json:"-"`
-	// RegionId uint
 	HozNumber  *string  `gorm:"index"` // Номер хоз-ва
-	District   District `json:"-"`
+	District   District `json:"-" gorm:"constraint:OnUpdate:CASCADE,OnDelete:RESTRICT;"`
 	DistrictId uint     // ID района, в котором находится хозяйство
-	Parrent    *Farm    `json:"-"`
-	ParrentId  *uint    // ID более управляющего хоз-ва (для хозяйства - холдинг, для фермы - хозяйство)
+	Parrent    *Farm    `json:"-" gorm:"constraint:OnUpdate:CASCADE,OnDelete:RESTRICT;"`
+	ParrentId  *uint    // ID управляющего хоз-ва (для хозяйства - холдинг, для фермы - хозяйство)
 
 	Type      uint    // Тип: хозяйство, ферма, холдинг
 	Name      string  // Название хозяйства
 	NameShort string  // Краткое название хозяйства
 	Inn       *string // ИНН
 
-	Address     string  // Адрес
-	Phone       *string // телефон
-	Email       *string // Эл. почта
-	Description *string // описание
-	CowsCount   *uint   // Количество коров
+	Address             string   // Адрес
+	Phone               *string  // телефон
+	Email               *string  // Эл. почта
+	Description         *string  // описание
+	CowsCount           *uint    // Количество коров в базе
+	HozPercentageInBase *float64 // Процент хозяйств в базе
 }
 
 func (f *Farm) Validate() error {
+	return nil
 	if f.Email != nil {
 		matched, err := regexp.MatchString(emailRegexp, *f.Email)
 		if err != nil {
 			return err
 		}
 		if !matched {
-			return errors.New("email address is invalid")
+			return errors.New("email address is invalid " + *f.Email)
 		}
 	}
 	if f.Phone != nil {
@@ -45,7 +45,7 @@ func (f *Farm) Validate() error {
 			return err
 		}
 		if !matched {
-			return errors.New("phone number is invalid")
+			return errors.New("phone number is invalid " + *f.Phone)
 		}
 	}
 	return nil
diff --git a/server/models/genetic.go b/server/models/genetic.go
index 2274a2d..1a17692 100644
--- a/server/models/genetic.go
+++ b/server/models/genetic.go
@@ -9,7 +9,7 @@ import (
 
 type Genetic struct {
 	ID                        uint      `gorm:"primaryKey"` // ID записи о генотипировании
-	CowID                     uint      `gorm:"index"`      // ID коровы
+	CowID                     uint      `gorm:"index;"`     // ID коровы
 	ProbeNumber               string    // Номер пробы
 	BloodDate                 *DateOnly `gorm:"index"` // Дата взятия пробы крови
 	ResultDate                *DateOnly `gorm:"index"` // Дата получения результата
@@ -21,6 +21,7 @@ type Genetic struct {
 }
 
 func (g *Genetic) Validate() error {
+	return nil
 	db := dbConnection
 	cow := Cow{}
 	if err := db.First(&cow, g.CowID).Error; err != nil {
@@ -57,21 +58,23 @@ type GeneticIllnessStatus struct {
 }
 
 func (g *Genetic) BeforeCreate(tx *gorm.DB) error {
+	now := time.Now().UTC()
 	if g.ResultDate == nil {
-		g.ResultDate = &DateOnly{Time: time.Now().UTC()}
+		g.ResultDate = &DateOnly{Time: now.AddDate(-1, 0, 1)}
 	}
 	if g.BloodDate == nil {
-		g.BloodDate = &DateOnly{Time: time.Now().UTC()}
+		g.BloodDate = &DateOnly{Time: now.AddDate(-1, 0, 0)}
 	}
 	return g.Validate()
 }
 
 func (g *Genetic) BeforeUpdate(tx *gorm.DB) error {
+	now := time.Now().UTC()
 	if g.ResultDate == nil {
-		g.ResultDate = &DateOnly{Time: time.Now().UTC()}
+		g.ResultDate = &DateOnly{Time: now.AddDate(-1, 0, 1)}
 	}
 	if g.BloodDate == nil {
-		g.BloodDate = &DateOnly{Time: time.Now().UTC()}
+		g.BloodDate = &DateOnly{Time: now.AddDate(-1, 0, 0)}
 	}
 	return g.Validate()
 }
diff --git a/server/models/grades.go b/server/models/grades.go
index 1d4d70b..3dcce11 100644
--- a/server/models/grades.go
+++ b/server/models/grades.go
@@ -1,12 +1,54 @@
 package models
 
 type Grade struct {
-	ID uint `gorm:"primaryKey" example:"1"` // ID оценки
-	// CowID           uint
-	GeneralValue    *float64 // Общая оценка по EBV
-	EbvMilk         *float64 // Оценка удоя по EBV
-	EbvFat          *float64 // Оценка жира по EBV
-	EbvProtein      *float64 // Оценка белка по EBV
-	EbvInsemenation *float64 // Оценка кратности осеменения по EBV
-	EvbService      *float64 // Оценка длительности сервисного периода по EBV
+	ID    uint `gorm:"primaryKey" example:"1"` // ID оценки
+	CowID uint `gorm:"index;"`
+
+	GeneralValueReliability *float64 // Достоверность расчета общей оценки
+	GeneralValue            *float64 // Общая оценка по EBV
+
+	EbvMilkReliability *float64 // Достоверность расчета оценки удоя
+	EbvMilk            *float64 // Оценка удоя по EBV
+
+	EbvFatReliability *float64 // Достоверность расчета оценки жира
+	EbvFat            *float64 // Оценка жира по EBV
+
+	EbvProteinReliability *float64 // Достоверность расчета оценки белка
+	EbvProtein            *float64 // Оценка белка по EBV
+
+	EbvInsemenationReliability *float64 // Достоверность расчета оценки кратности осеменения
+	EbvInsemenation            *float64 // Оценка кратности осеменения по EBV
+
+	EbvServiceReliability *float64 // Достоверность расчета оценки сервисного периода
+	EbvService            *float64 // Оценка длительности сервисного периода по EBV
+
+	EbvMastit            *float64 // оценка мастита
+	EbvMastitReliability *float64 // достоверность мастита
+
+	EbvFatPercents            *float64 // оценка жира в %
+	EbvFatPercentsReliability *float64 // достоверность оценки жира в процентах
+
+	EbvProteinPercents            *float64 // оценка белка в процентах
+	EbvProteinPercentsReliability *float64 // достоверность оценки белка в процентах
+
+	EbvSomaticNucs            *float64 // оценка числа соматических клеток
+	EbvSomaticNucsReliability *float64 // достоверность оценки числа соматических клеток
+
+	EbvProductiveLongevity            *float64 // оценка продуктивного долголетия
+	EbvProductiveLongevityReliability *float64 // достоверность оценки продуктивного долголетия
+}
+
+type GradeRegion struct {
+	Grade
+	CowID uint `example:"1"`
+}
+
+type GradeHoz struct {
+	Grade
+	CowID uint `example:"1"`
+}
+
+type GradeCountry struct {
+	Grade
+	CowID uint `example:"1"`
 }
diff --git a/server/models/init.go b/server/models/init.go
index 2cb4c1d..7ae347f 100644
--- a/server/models/init.go
+++ b/server/models/init.go
@@ -31,8 +31,42 @@ func initDb() error {
 		panic(err)
 	}
 
-	db.AutoMigrate(&Genetic{}, &GeneticIllnessStatus{}, &GeneticIllnessData{}, &GeneticIllness{}, &User{}, &Region{}, &News{}, &Partner{}, &Breed{}, &Farm{}, &Role{}, &Sex{}, &Cow{}, &Event{}, &Grade{},
-		&EventType{}, &Lactation{}, &CheckMilk{}, &DailyMilk{}, &District{}, &Exterior{}, &Update{}, &Document{}, &UserRegisterRequest{}, &HozRegisterRequest{}, &HoldRegisterRequest{})
+	db.AutoMigrate(
+		&BlupStatistics{},
+		&Cow{},
+		&Genetic{},
+		&GeneticIllnessStatus{},
+		&GeneticIllnessData{},
+		&GeneticIllness{},
+		&User{},
+		&Region{},
+		&News{},
+		&Partner{},
+		&Breed{},
+		&Farm{},
+		&Role{},
+		&Sex{},
+		&Event{},
+		&Grade{},
+		&GradeHoz{},
+		&GradeRegion{},
+		&GradeCountry{},
+		&EventType{},
+		&Lactation{},
+		&CheckMilk{},
+		&DailyMilk{},
+		&District{},
+		&Exterior{},
+		&Update{},
+		&Document{},
+		&UserRegisterRequest{},
+		&HozRegisterRequest{},
+		&HoldRegisterRequest{},
+		&AdditionalInfo{},
+		&DownSides{},
+		&Measures{},
+		&GaussianStatistics{},
+	)
 	dbConnection = db
 	return nil
 }
@@ -49,8 +83,8 @@ func GetDb() *gorm.DB {
 		}
 
 		// SetMaxOpenConns sets the maximum number of open connections to the database.
-		sqlDB.SetMaxOpenConns(10)
-
+		sqlDB.SetMaxOpenConns(20)
+		//sqlDB.SetMaxIdleConns(2)
 	}
 	return dbConnection
 }
diff --git a/server/models/lactation.go b/server/models/lactation.go
index 2ffc8e4..ad6ce9a 100644
--- a/server/models/lactation.go
+++ b/server/models/lactation.go
@@ -8,10 +8,10 @@ import (
 type Lactation struct {
 	ID uint `gorm:"primaryKey"`
 
-	CowId uint `gorm:"index"` // ID коровы, данные о лактации которой записаны
+	CowId uint `gorm:"index;"` // ID коровы, данные о лактации которой записаны
 
-	CheckMilks []CheckMilk `json:"-"`
-	DailyMilks []DailyMilk `json:"-"`
+	CheckMilks []CheckMilk `json:"-" gorm:"constraint:OnUpdate:CASCADE,OnDelete:CASCADE;"`
+	DailyMilks []DailyMilk `json:"-" gorm:"constraint:OnUpdate:CASCADE,OnDelete:CASCADE;"`
 
 	Number uint // номер лактации
 
@@ -33,6 +33,7 @@ type Lactation struct {
 }
 
 func (l *Lactation) Validate() error {
+	return nil
 	if l.CalvingCount < 0 || l.CalvingCount > 2 {
 		return errors.New("calving count must be between 0 and 2")
 	}
diff --git a/server/models/news.go b/server/models/news.go
index 284ed38..539e1a2 100644
--- a/server/models/news.go
+++ b/server/models/news.go
@@ -6,7 +6,7 @@ type News struct {
 	ID   uint     `gorm:"primaryKey"`
 	Date DateOnly // Дата новости
 
-	Region   *Region `json:"-"`
+	Region   *Region `json:"-" gorm:"constraint:OnUpdate:CASCADE,OnDelete:CASCADE;"`
 	RegionId *uint   `gorm:"index"` // ID региона для которого записана новость
 	Title    string  // Заголовок новости
 	Text     string  // Текст новости
diff --git a/server/models/regexp.go b/server/models/regexp.go
index 5aedeb6..0a402e9 100644
--- a/server/models/regexp.go
+++ b/server/models/regexp.go
@@ -1,4 +1,4 @@
 package models
 
-const emailRegexp = "^.*.@.*.\\..*.$" // matches any sequence where at least one symbol before @, before . and after .
-const phoneRegexp = "^[0-9()\\-+]+$"  // sequence contains only numbers, (), -, +
+const emailRegexp = "^.*.@.*.\\..*.$"   // matches any sequence where at least one symbol before @, before . and after .
+const phoneRegexp = "^[0-9()\\-+\\ ]+$" // sequence contains only numbers, (), -, +
diff --git a/server/models/region.go b/server/models/region.go
index 885b532..27a956c 100644
--- a/server/models/region.go
+++ b/server/models/region.go
@@ -3,6 +3,6 @@ package models
 type Region struct {
 	ID     uint   `gorm:"primaryKey" default:"1"`
 	Name   string `example:"Усть-Каменский"` // Название региона
-	News   []News
-	RegNum uint // Номер региона (Архангельская область = 29)
+	News   []News `gorm:"constraint:OnUpdate:CASCADE,OnDelete:CASCADE;"`
+	RegNum uint   // Номер региона (Архангельская область = 29)
 }
diff --git a/server/models/register_request.go b/server/models/register_request.go
index 425f2a5..3183cb3 100644
--- a/server/models/register_request.go
+++ b/server/models/register_request.go
@@ -20,6 +20,7 @@ type UserRegisterRequest struct {
 }
 
 func (urr *UserRegisterRequest) Validate() error {
+	return nil
 	matched, err := regexp.MatchString(emailRegexp, urr.Email)
 	if err != nil {
 		return err
diff --git a/server/models/statistics.go b/server/models/statistics.go
new file mode 100644
index 0000000..41d8fd6
--- /dev/null
+++ b/server/models/statistics.go
@@ -0,0 +1,25 @@
+package models
+
+import "github.com/lib/pq"
+
+type GaussianStatistics struct {
+	ID uint
+
+	Farm   *Farm `gorm:"constraint:OnUpdate:CASCADE,OnDelete:CASCADE;"`
+	FarmID *uint `gorm:"index"` // не null, если статистика собрана по холдингу или хозяйству
+
+	Region   *Region `constraint:"OnUpdate:CASCADE,OnDelete:CASCADE;"`
+	RegionID *uint   `gorm:"index"` // не null, если статистика собрана по региону
+
+	MinIndex  float64       // Значение минимального индекса
+	MinCount  uint          // Количество коров с минимальным индексом
+	MinCowIds pq.Int64Array `gorm:"type:bigint[]" swaggertype:"array,number"` // ID коров с минимальным значением индекса
+
+	AvgIndex  float64       // Значение среднего индекса
+	AvgCount  uint          // Количество коров с минимальным индексом
+	AvgCowIds pq.Int64Array `gorm:"type:bigint[]" swaggertype:"array,number"` // ID коров с средним значением индекса
+
+	MaxIndex  float64       // Значение максимального индекса
+	MaxCount  uint          // Количество коров с максимальным индексом
+	MaxCowIds pq.Int64Array `gorm:"type:bigint[]" swaggertype:"array,number"` // ID коров с максимальным значением индекса
+}
diff --git a/server/models/user.go b/server/models/user.go
index 05fdf7c..eede86e 100644
--- a/server/models/user.go
+++ b/server/models/user.go
@@ -9,18 +9,19 @@ import (
 type User struct {
 	ID                    uint   `gorm:"primaryKey"`
 	NameSurnamePatronimic string // ФИО
-	Role                  Role
+	Role                  Role   `gorm:"constraint:OnUpdate:CASCADE,OnDelete:RESTRICT;"`
 	RoleId                int    // ID роли
 	Email                 string `gorm:"uniqueIndex"` // Почта
 	Phone                 string // телефон
 	Password              []byte `json:"-"`
-	Farm                  *Farm  `json:"-"`
+	Farm                  *Farm  `json:"-" gorm:"constraint:OnUpdate:CASCADE,OnDelete:CASCADE;"`
 	FarmId                *uint  // ID хозяйства
-	Region                Region `json:"-"`
+	Region                Region `json:"-" gorm:"constraint:OnUpdate:CASCADE,OnDelete:CASCADE;"`
 	RegionId              uint   `example:"1"` // ID региона
 }
 
 func (u *User) Validate() error {
+	return nil
 	matchedMail, err := regexp.MatchString(emailRegexp, u.Email)
 	if err != nil {
 		return err
diff --git a/server/routes/analitics/analitics.go b/server/routes/analitics/analitics.go
index 1e8d71a..9656915 100644
--- a/server/routes/analitics/analitics.go
+++ b/server/routes/analitics/analitics.go
@@ -11,4 +11,9 @@ func (b *Analitics) WriteRoutes(rg *gin.RouterGroup) {
 	checkMilksWriter := CheckMilks{}
 	checkMilksWriter.WriteRoutes(apiGroup)
 	genotypedWriter.WriteRoutes(apiGroup)
+	totalGr := apiGroup.Group("/total")
+	total := Total{}
+	totalGr.GET("/:region_id/regionalStatistics/", total.RegionalStatistics())
+	totalGr.GET("/region/:region_id/", total.RegionStatistics())
+	totalGr.GET("/farm/:farm_id/", total.FarmStatistics())
 }
diff --git a/server/routes/analitics/analitics_auth_restrictions.go b/server/routes/analitics/analitics_auth_restrictions.go
new file mode 100644
index 0000000..3af64ca
--- /dev/null
+++ b/server/routes/analitics/analitics_auth_restrictions.go
@@ -0,0 +1,40 @@
+package analitics
+
+import (
+	"net/http"
+
+	"github.com/gin-gonic/gin"
+)
+
+// AnaliticsAuthMiddleware
+// used to restrict access of users to analitics
+func AnaliticsAuthMiddleware() gin.HandlerFunc {
+	return func(c *gin.Context) {
+		region := c.Param("region")
+		district := c.Param("district")
+		userRoleId, exists := c.Get("RoleId")
+		if !exists {
+			c.JSON(http.StatusInternalServerError, "RoleId не найден в контексте")
+			c.Abort()
+			return
+		}
+		// Фермер (роль 1) может видеть аналитику только по своему району
+		if district != "" && (userRoleId == 1) {
+			userDistrictId, exists := c.Get("DistId")
+			if !exists || userDistrictId != district {
+				c.JSON(421, "Нет доступа к району")
+				c.Abort()
+				return
+			}
+		}
+		// Фермер (роль 1) и региональный чиновник (роль 2) могут видеть только свой регион
+		if region != "" && (userRoleId == 1 || userRoleId == 2) {
+			regionId, exists := c.Get("RegionId")
+			if !exists || regionId != region {
+				c.JSON(http.StatusInternalServerError, "нет доступа к региону")
+				c.Abort()
+				return
+			}
+		}
+	}
+}
diff --git a/server/routes/analitics/total.go b/server/routes/analitics/total.go
new file mode 100644
index 0000000..e46c267
--- /dev/null
+++ b/server/routes/analitics/total.go
@@ -0,0 +1,98 @@
+package analitics
+
+import (
+	"cow_backend/models"
+	"net/http"
+	"strconv"
+
+	"github.com/gin-gonic/gin"
+)
+
+type Total struct{}
+
+type RegionalResponse struct {
+	models.GaussianStatistics
+}
+
+type GaussianResponse struct {
+	models.GaussianStatistics
+}
+
+// RegionalStatistics
+// @Summary      Get statistics for region
+// @Description  Еще не придумал что возвращает
+// @Param        region_id    path     int  true  "регион по которому собиается статистика"
+// @Tags         NEW_ANALITICS
+// @Produce      json
+// @Success      200  {array}   RegionalResponse
+// @Failure      422  {object}   string
+// @Router       /analitics/total/{region_id}/regionalStatistics [get]
+func (t Total) RegionalStatistics() gin.HandlerFunc {
+	return func(c *gin.Context) {
+		farmIds := []uint{}
+		db := models.GetDb()
+		farmsQuery := `EXISTS (SELECT 1 FROM districts WHERE farms.district_id = districts.id AND districts.region_id = ?)`
+
+		if err := db.Model(&models.Farm{}).Where(farmsQuery, c.Param("region_id")).Pluck("id", &farmIds).Error; err != nil {
+			c.JSON(http.StatusBadRequest, err.Error())
+			return
+		}
+
+		statistics := []models.GaussianStatistics{}
+		regIdUint, err := strconv.ParseUint(c.Param("region_id"), 10, 64)
+		if err != nil {
+			c.JSON(422, err.Error())
+			return
+		}
+		if err := db.Where("farm_id in ? or region_id = ?", farmIds, regIdUint).Preload("Farm").Preload("Region").Order("id").Find(&statistics).Error; err != nil {
+			c.JSON(500, err.Error())
+			return
+		}
+
+		c.JSON(200, statistics)
+	}
+}
+
+// RegionStatistics
+// @Summary      Get statistics for region
+// @Description  Еще не придумал что возвращает
+// @Param        region_id    path     int  true  "регион по которому собиается статистика"
+// @Tags         NEW_ANALITICS
+// @Produce      json
+// @Success      200  {object}   RegionalResponse
+// @Failure      422  {object}   string
+// @Router       /analitics/total/region/{region_id} [get]
+func (t Total) RegionStatistics() gin.HandlerFunc {
+	return func(c *gin.Context) {
+		db := models.GetDb()
+		statistics := models.GaussianStatistics{}
+
+		if err := db.First(&statistics, map[string]any{"region_id": c.Param("region_id")}).Error; err != nil {
+			c.JSON(500, err.Error())
+			return
+		}
+		c.JSON(200, statistics)
+	}
+}
+
+// FarmStatistics
+// @Summary      Get statistics for region
+// @Description  Еще не придумал что возвращает
+// @Param        farm_id    path     int  true  "холдинг/хозяйство по которому собиается статистика"
+// @Tags         NEW_ANALITICS
+// @Produce      json
+// @Success      200  {object}   RegionalResponse
+// @Failure      422  {object}   string
+// @Router       /analitics/total/farm/{farm_id} [get]
+func (t Total) FarmStatistics() gin.HandlerFunc {
+	return func(c *gin.Context) {
+		db := models.GetDb()
+		statistics := models.GaussianStatistics{}
+
+		if err := db.First(&statistics, map[string]any{"farm_id": c.Param("farm_id")}).Error; err != nil {
+			c.JSON(500, err.Error())
+			return
+		}
+		c.JSON(200, statistics)
+	}
+}
diff --git a/server/routes/cows/add_filters_to_query.go b/server/routes/cows/add_filters_to_query.go
index f5f4430..db4a183 100644
--- a/server/routes/cows/add_filters_to_query.go
+++ b/server/routes/cows/add_filters_to_query.go
@@ -59,30 +59,7 @@ type CowsFilter struct { // Фильтр коров
 func AddFiltersToQuery(bodyData cows_filter.CowsFilter, query *gorm.DB) (*gorm.DB, error) {
 	cfm := cows_filter.NewCowFilteredModel(bodyData, query)
 	if err := filters.ApplyFilters(cfm,
-		cows_filter.ByAbort{},
-		cows_filter.ByAnyIllneses{},
-		cows_filter.ByBirkingDate{},
-		cows_filter.ByBreed{},
-		cows_filter.ByBrithDate{},
-		cows_filter.ByCalvingDate{},
-		cows_filter.ByControlMilkingDate{},
-		cows_filter.ByCreatedAt{},
-		cows_filter.ByDeath{},
-		cows_filter.ByDepartDate{},
-		cows_filter.ByExterior{},
-		cows_filter.ByHoz{},
-		cows_filter.ByIllDate{},
-		cows_filter.ByInbrindingCoeffByFamily{},
-		cows_filter.ByInbrindingCoeffByGenotype{},
-		cows_filter.ByIsGenotyped{},
-		cows_filter.ByInsemenationDate{},
-		cows_filter.BySearchString{},
-		cows_filter.BySex{},
-		cows_filter.ByStillBorn{},
-		cows_filter.ByTwins{},
-		cows_filter.ByMonogeneticIllnesses{},
-		cows_filter.OrderBy{},
-		cows_filter.ByRegion{}); err != nil {
+		cows_filter.ALL_FILTERS...); err != nil {
 		return nil, err
 	}
 	return cfm.GetQuery(), nil
diff --git a/server/routes/cows/exteriors.go b/server/routes/cows/exteriors.go
index fc423d6..478ec4d 100644
--- a/server/routes/cows/exteriors.go
+++ b/server/routes/cows/exteriors.go
@@ -20,7 +20,12 @@ func (f *Cows) Exterior() func(*gin.Context) {
 		id := c.Param("id")
 		cow := models.Cow{}
 		db := models.GetDb()
-		if err := db.Preload("Exterior").First(&cow, id).Error; err != nil {
+		if err := db.
+			Preload("Exterior").
+			Preload("Exterior.Measures").
+			Preload("Exterior.DownSides").
+			Preload("Exterior.AdditionalInfo").
+			First(&cow, id).Error; err != nil {
 			c.JSON(500, err.Error())
 			return
 		}
diff --git a/server/routes/cows/filter.go b/server/routes/cows/filter.go
index 17caf72..825f835 100644
--- a/server/routes/cows/filter.go
+++ b/server/routes/cows/filter.go
@@ -22,7 +22,7 @@ type FilterSerializedCow struct {
 	InventoryNumber           *string                     `validate:"required" example:"321"`                                   // Инвентарный номер коровы
 	Name                      string                      `validate:"required" example:"Буренка"`                               // Кличка коровы
 	FarmGroupName             string                      `validate:"required" example:"ООО Аурус"`                             // Название хозяйства, в котором корова
-	BirthDate                 models.DateOnly             `validate:"required"`                                                 // Дата рождения коровы
+	BirthDate                 *models.DateOnly            `validate:"required"`                                                 // Дата рождения коровы
 	Genotyped                 bool                        `validate:"required" example:"true"`                                  // Факт генотипирования коровы
 	Approved                  bool                        `validate:"required" example:"true"`                                  // Подтверждена ли админом
 	DepartDate                *models.DateOnly            `json:",omitempty" validate:"optional"`                               // Дата выбытия
@@ -39,14 +39,15 @@ type FilterSerializedCow struct {
 	SexName                   *string                     `json:",omitempty" validate:"optional"`                               // Название породы
 	HozName                   *string                     `json:",omitempty" validate:"optional"`                               // Название хозяйства
 
-	DeathDate   *models.DateOnly `json:",omitempty" validate:"optional"` // Дата смерти
-	IsDead      *bool            `json:",omitempty" validate:"optional"` // Факт смерти
-	IsTwins     *bool            `json:",omitempty" validate:"optional"` // Факт рождения близнецов
-	IsStillBorn *bool            `json:",omitempty" validate:"optional"` // Факт мертворождения
-	IsAborted   *bool            `json:",omitempty" validate:"optional"` // Факт аборта
-	Events      []models.Event   `json:",omitempty" validate:"optional"` // Вет события
-	IsGenotyped *bool            `json:",omitempty" validate:"optional"` // Факт генотипирования
-	CreatedAt   *models.DateOnly `json:",omitempty" validate:"optional"` // Дата внесения информации о корове в БД
+	DeathDate             *models.DateOnly `json:",omitempty" validate:"optional"` // Дата смерти
+	IsDead                *bool            `json:",omitempty" validate:"optional"` // Факт смерти
+	IsTwins               *bool            `json:",omitempty" validate:"optional"` // Факт рождения близнецов
+	IsStillBorn           *bool            `json:",omitempty" validate:"optional"` // Факт мертворождения
+	IsAborted             *bool            `json:",omitempty" validate:"optional"` // Факт аборта
+	Events                []models.Event   `json:",omitempty" validate:"optional"` // Вет события
+	IsGenotyped           *bool            `json:",omitempty" validate:"optional"` // Факт генотипирования
+	CreatedAt             *models.DateOnly `json:",omitempty" validate:"optional"` // Дата внесения информации о корове в БД
+	EbvGeneralValueRegion *float64         // Общая оценка EBV по региону
 }
 
 func serializeByFilter(c *models.Cow, filter *cows_filter.CowsFilter) FilterSerializedCow {
@@ -59,6 +60,12 @@ func serializeByFilter(c *models.Cow, filter *cows_filter.CowsFilter) FilterSeri
 		BirthDate:       c.BirthDate,
 		Genotyped:       c.Genetic != nil,
 		Approved:        c.Approved != 0,
+		// EbvGeneralValueRegion: c.GradeRegion.GeneralValue,
+	}
+	if c.GradeRegion != nil {
+		res.EbvGeneralValueRegion = c.GradeRegion.GeneralValue
+	} else {
+		c.GradeRegion = nil
 	}
 	if filter.DepartDateTo != nil && *filter.DepartDateTo != "" ||
 		filter.DepartDateFrom != nil && *filter.DepartDateFrom != "" {
@@ -221,6 +228,10 @@ func serializeByFilter(c *models.Cow, filter *cows_filter.CowsFilter) FilterSeri
 		filter.CreatedAtTo != nil && *filter.CreatedAtTo != "" {
 		res.CreatedAt = &models.DateOnly{Time: c.CreatedAt}
 	}
+
+	if filter.EbvGeneralValueRegionFrom != nil || filter.EbvGeneralValueRegionTo != nil {
+		res.EbvGeneralValueRegion = c.GradeRegion.GeneralValue
+	}
 	return res
 }
 
@@ -295,7 +306,7 @@ func (c *Cows) Filter() func(*gin.Context) {
 		}
 
 		db := models.GetDb()
-		query := db.Model(&models.Cow{}).Preload("FarmGroup").Preload("Genetic").Where("approved <> -1")
+		query := db.Model(&models.Cow{}).Preload("FarmGroup").Preload("Genetic").Joins("GradeRegion").Where("approved <> -1")
 		if nQuery, err := AddFiltersToQuery(bodyData, query); err != nil {
 			c.JSON(422, err.Error())
 			return
@@ -323,7 +334,7 @@ func (c *Cows) Filter() func(*gin.Context) {
 			return
 		}
 
-		query = query.Limit(int(recordsPerPage)).Offset(int(recordsPerPage) * int(pageNumber-1)).Order("inventory_number")
+		query = query.Limit(int(recordsPerPage)).Offset(int(recordsPerPage) * int(pageNumber-1))
 		dbCows := []models.Cow{}
 		if err := query.Debug().Find(&dbCows).Error; err != nil {
 			c.JSON(500, err.Error())
diff --git a/server/routes/cows/genetic.go b/server/routes/cows/genetic.go
index e07c180..07ace81 100644
--- a/server/routes/cows/genetic.go
+++ b/server/routes/cows/genetic.go
@@ -2,6 +2,8 @@ package cows
 
 import (
 	"cow_backend/models"
+	"os"
+	"strconv"
 
 	"github.com/gin-gonic/gin"
 )
@@ -29,6 +31,14 @@ func (f *Cows) Genetic() func(*gin.Context) {
 			c.JSON(500, err.Error())
 			return
 		}
+		if cow.Genetic != nil && cow.Genetic.GtcFilePath == nil && cow.SelecsNumber != nil{
+			if err := os.Link("./static/gtc/sample.gtc", "./static/gtc/"+strconv.FormatUint(*cow.SelecsNumber, 10)+".gtc"); err != nil && !os.IsExist(err) {
+				c.JSON(500, err.Error())
+				return
+			}
+			cow.Genetic.GtcFilePath = new(string)
+			*cow.Genetic.GtcFilePath = strconv.FormatUint(*cow.SelecsNumber, 10)+".gtc"
+		}
 		c.JSON(200, cow.Genetic)
 	}
 }
diff --git a/server/routes/cows/grades.go b/server/routes/cows/grades.go
index 51151fb..fd85cf3 100644
--- a/server/routes/cows/grades.go
+++ b/server/routes/cows/grades.go
@@ -6,9 +6,18 @@ import (
 	"github.com/gin-gonic/gin"
 )
 
+func getPercents(x float64, min float64, max float64) float64 {
+	return ((x-min)/(max-min) - 0.5) * 100
+}
+
 // Grades
 // @Summary      Get grades
-// @Description  Возращает словарь с двумя ключам "ByRegion" - оценки по региону и "ByHoz" - оценки по хозяйству
+// @Description  Возращает словарь с ключами:
+// @Description  1. ByRegion - Значения оценок EBV по региону
+// @Description  2. ByHoz - Значения оценок EBV по хозяйству
+// @Description  3. ByCountry - Значения оценок EBV по стране
+// @Description  4. Average - Средние значения оценок EBV
+// @Description  5. PercentsRegion - Отклонение оценок от среднего значения для региона
 // @Tags         Cows
 // @Param        id   path      int  true  "ID коровы для которой ищутся оценки"
 // @Produce      json
@@ -20,13 +29,77 @@ func (c *Cows) Grades() func(*gin.Context) {
 		id := c.Param("id")
 		db := models.GetDb()
 		cow := models.Cow{}
-		if err := db.Preload("GradeRegion").Preload("GradeHoz").First(&cow, id).Error; err != nil {
+		percentageRegion := models.Grade{}
+		if err := db.
+			Preload("GradeRegion").
+			Preload("GradeHoz").
+			Preload("GradeCountry").
+			First(&cow, id).Error; err != nil {
 			c.JSON(500, err.Error())
 			return
 		}
+
+		blupStat := models.BlupStatistics{}
+		if res := db.Limit(1).Order("created_at desc").Find(&blupStat); res.Error != nil {
+			c.JSON(500, res.Error.Error())
+			return
+		} else if res.RowsAffected == 0 {
+			c.JSON(500, "не найдена статистика blup")
+		}
+		if cow.GradeRegion != nil {
+			percentageRegion = cow.GradeRegion.Grade
+			if cow.GradeRegion.EbvFat != nil {
+				percentageRegion.EbvFat = new(float64)
+				*percentageRegion.EbvFat = getPercents(*cow.GradeRegion.EbvFat, blupStat.MinEbvFatRegion, blupStat.MaxEbvFatRegion)
+			}
+			if cow.GradeRegion.EbvMilk != nil {
+				percentageRegion.EbvMilk = new(float64)
+				*percentageRegion.EbvMilk = getPercents(*cow.GradeRegion.EbvMilk, blupStat.MinEbvMilkRegion, blupStat.MaxEbvMilkRegion)
+			}
+			if cow.GradeRegion.EbvProtein != nil {
+				percentageRegion.EbvProtein = new(float64)
+				*percentageRegion.EbvProtein = getPercents(*cow.GradeRegion.EbvProtein, blupStat.MinEbvProteinRegion, blupStat.MaxEbvProteinRegion)
+			}
+			if cow.GradeRegion.EbvInsemenation != nil {
+				percentageRegion.EbvInsemenation = new(float64)
+				*percentageRegion.EbvInsemenation = getPercents(*cow.GradeRegion.EbvInsemenation, blupStat.MinEbvInsemenationRegion, blupStat.MaxEbvInsemenationRegion)
+			}
+			if cow.GradeRegion.EbvService != nil {
+				percentageRegion.EbvService = new(float64)
+				*percentageRegion.EbvService = getPercents(*cow.GradeRegion.EbvService, blupStat.MinEbvServiceRegion, blupStat.MaxEbvServiceRegion)
+			}
+			if cow.GradeRegion.GeneralValue != nil {
+				percentageRegion.GeneralValue = new(float64)
+				*percentageRegion.GeneralValue = getPercents(*cow.GradeRegion.GeneralValue, blupStat.MinEbvGeneralValueRegion, blupStat.MaxEbvGeneralValueRegion)
+			}
+			if cow.GradeRegion.EbvSomaticNucs != nil {
+				percentageRegion.EbvSomaticNucs = new(float64)
+				*percentageRegion.EbvSomaticNucs = getPercents(*cow.GradeRegion.EbvSomaticNucs, blupStat.MinEbvSomaticNucs, blupStat.MaxEbvSomaticNucs)
+			}
+			if cow.GradeRegion.EbvProductiveLongevity != nil {
+				percentageRegion.EbvProductiveLongevity = new(float64)
+				*percentageRegion.EbvProductiveLongevity = getPercents(*cow.GradeRegion.EbvProductiveLongevity, blupStat.MinEbvProductiveLongevity, blupStat.MaxEbvProductiveLongevity)
+			}
+			if cow.GradeRegion.EbvMastit != nil {
+				percentageRegion.EbvMastit = new(float64)
+				*percentageRegion.EbvMastit = getPercents(*cow.GradeRegion.EbvMastit, blupStat.MinEbvMastit, blupStat.MaxEbvMastit)
+			}
+			if cow.GradeRegion.EbvFatPercents != nil {
+				percentageRegion.EbvFatPercents = new(float64)
+				*percentageRegion.EbvFatPercents = getPercents(*cow.GradeRegion.EbvFatPercents, blupStat.MinEbvFatPercents, blupStat.MaxEbvFatPercents)
+			}
+			if cow.GradeRegion.EbvProteinPercents != nil {
+				percentageRegion.EbvProteinPercents = new(float64)
+				*percentageRegion.EbvProteinPercents = getPercents(*cow.GradeRegion.EbvProteinPercents, blupStat.MinEbvProteinPercents, blupStat.MaxEbvProteinPercents)
+			}
+		}
+
 		c.JSON(200, gin.H{
-			"ByRegion": cow.GradeRegion,
-			"ByHoz":    cow.GradeHoz,
+			"ByRegion":       cow.GradeRegion,
+			"ByHoz":          cow.GradeHoz,
+			"ByCountry":      cow.GradeCountry,
+			"Average":        blupStat,
+			"PercentsRegion": percentageRegion,
 		})
 	}
 }
diff --git a/server/routes/farms/farm.go b/server/routes/farms/farm.go
index 06a121d..df0e36c 100644
--- a/server/routes/farms/farm.go
+++ b/server/routes/farms/farm.go
@@ -1,7 +1,6 @@
 package farms
 
 import (
-	"cow_backend/models"
 	"cow_backend/routes/auth"
 
 	// "net/http"
@@ -18,15 +17,7 @@ func (f *Farms) WriteRoutes(rg *gin.RouterGroup) {
 	authGroup := apiGroup.Group("")
 	authGroup.Use(auth.AuthMiddleware(auth.Farmer, auth.RegionalOff, auth.FederalOff))
 	authGroup.GET("/", f.GetByFilter())
-	apiGroup.GET("/hoz", func(c *gin.Context) {
-		db := models.GetDb()
-		farms := []models.Farm{}
-
-		if err := db.Find(&farms, map[string]any{"type": 2}).Error; err != nil {
-			c.JSON(500, err.Error())
-			return
-		}
-
-		c.JSON(200, farms)
-	})
+	apiGroup.GET("/hoz", f.GetHoz())
+	apiGroup.GET("/hold", f.GetHoldings())
+	apiGroup.GET("/farm", f.GetFarms())
 }
diff --git a/server/routes/farms/get.go b/server/routes/farms/get.go
index 7ebfe14..b6ddbc8 100644
--- a/server/routes/farms/get.go
+++ b/server/routes/farms/get.go
@@ -25,6 +25,8 @@ func (f *Farms) GetByID() func(*gin.Context) {
 // GetByFilter
 // @Summary      Get list of farms
 // @Description  Возращает список ферм. Разрешает отсутсвие фильтров
+// @Deprecated   Рут является deprecated, никакие изменения в его работу вноситься не будут.
+// @Deprecated   Если появится необходимость как либо модифицировать его работу - лучше написать новый
 // @Tags         Farms
 // @Param        parrent_id    query     object  false  "ID более главной фермы, null для поиска холдингов"
 // @Produce      json
@@ -47,7 +49,8 @@ func (f *Farms) GetByFilter() func(*gin.Context) {
 				c.JSON(http.StatusInternalServerError, "FarmId не найден в контексте")
 				return
 			}
-			qres := db.Where("EXISTS (SELECT 1 FROM COWS WHERE cows.farm_group_id = farms.id) AND id = ?", farmId).Find(&farms)
+			//qres := db.Where("EXISTS (SELECT 1 FROM COWS WHERE cows.farm_group_id = farms.id) AND id = ?", farmId).Find(&farms)
+			qres := db.Where(map[string]any{"parrent_id": nil, "id": farmId, "type": []uint{1, 2}}).Find(&farms)
 			if qres.Error != nil {
 				c.JSON(500, qres.Error)
 			}
@@ -62,14 +65,14 @@ func (f *Farms) GetByFilter() func(*gin.Context) {
 			qres := db.
 				Joins("JOIN districts AS d ON farms.district_id = d.id").
 				Joins("JOIN regions AS r ON r.id = d.region_id").
-				Where("EXISTS (SELECT 1 FROM COWS WHERE cows.farm_group_id = farms.id) AND r.id = ?", regionId).
+				Where("(parrent_id is NULL) AND r.id = ? AND type in (1,2)", regionId).
 				Find(&farms)
 			if qres.Error != nil {
 				c.JSON(500, qres.Error)
 			}
 			c.JSON(200, farms)
 		} else {
-			qres := db.Where("EXISTS (SELECT 1 FROM COWS WHERE cows.farm_group_id = farms.id)").Find(&farms)
+			qres := db.Where("parrent_id is NULL AND type in (1,2)").Find(&farms)
 			if qres.Error != nil {
 				c.JSON(500, qres.Error)
 			}
@@ -79,3 +82,63 @@ func (f *Farms) GetByFilter() func(*gin.Context) {
 
 	// return routes.GenerateGetFunctionByFilters[models.Farm](true, "parrent_id")
 }
+
+// GetFarms
+// @Summary Get list of Farms
+// @Description Возвращает список всех ферм
+// @Tags Farms
+// @Produce json
+// @Success 200 {array} models.Farm
+// @Failure      500  {object}   string
+// @Router       /farms/farm [get]
+func (f *Farms) GetFarms() gin.HandlerFunc {
+	return func(c *gin.Context) {
+		db := models.GetDb()
+		farms := []models.Farm{}
+		if err := db.Find(&farms, map[string]any{"type": 3}).Error; err != nil {
+			c.JSON(500, err.Error())
+			return
+		}
+		c.JSON(200, farms)
+	}
+}
+
+// GetHoz
+// @Summary Get list of Hoz
+// @Description Возвращает список всех хозяйств
+// @Tags Farms
+// @Produce json
+// @Success 200 {array} models.Farm
+// @Failure      500  {object}   string
+// @Router       /farms/hoz [get]
+func (f *Farms) GetHoz() gin.HandlerFunc {
+	return func(c *gin.Context) {
+		db := models.GetDb()
+		farms := []models.Farm{}
+		if err := db.Find(&farms, map[string]any{"type": 2}).Error; err != nil {
+			c.JSON(500, err.Error())
+			return
+		}
+		c.JSON(200, farms)
+	}
+}
+
+// GetHoldings
+// @Summary Get list of holdings
+// @Description Возвращает список всех холдингов
+// @Tags Farms
+// @Produce json
+// @Success 200 {array} models.Farm
+// @Failure      500  {object}   string
+// @Router       /farms/hold [get]
+func (f *Farms) GetHoldings() gin.HandlerFunc {
+	return func(c *gin.Context) {
+		db := models.GetDb()
+		farms := []models.Farm{}
+		if err := db.Find(&farms, map[string]any{"type": 1}).Error; err != nil {
+			c.JSON(500, err.Error())
+			return
+		}
+		c.JSON(200, farms)
+	}
+}
diff --git a/server/routes/gui/gui.go b/server/routes/gui/gui.go
index 88e84c0..1380834 100644
--- a/server/routes/gui/gui.go
+++ b/server/routes/gui/gui.go
@@ -21,6 +21,7 @@ func (s *Gui) WriteRoutes(rg *gin.RouterGroup) {
 	apiGroup.GET("/gtcLoad", func(c *gin.Context) { c.HTML(200, "GtcLoadPage.tmpl", gin.H{"title": "gtc"}) })
 	apiGroup.GET("/partnerLoad", func(c *gin.Context) { c.HTML(200, "PartnerLoadPage.tmpl", gin.H{"title": "gtc"}) })
 	apiGroup.GET("/documentLoad", func(c *gin.Context) { c.HTML(200, "DocumentLoadPage.tmpl", gin.H{"title": "document"}) })
+	apiGroup.GET("/exteriorDataLoad", func(c *gin.Context) { c.HTML(200, "ExteriorDataLoadPage.tmpl", gin.H{"title": "document"}) })
 	apiGroup.GET("", s.Index())
 }
 
diff --git a/server/routes/load/cow.go b/server/routes/load/cow.go
index 20c9f21..fc8cb02 100644
--- a/server/routes/load/cow.go
+++ b/server/routes/load/cow.go
@@ -36,7 +36,7 @@ type cowRecord struct {
 	Name                    string
 	InbrindingCoeffByFamily *float64
 
-	BirthDate   models.DateOnly
+	BirthDate   *models.DateOnly
 	DepartDate  *models.DateOnly
 	DeathDate   *models.DateOnly
 	BirkingDate *models.DateOnly
@@ -165,11 +165,12 @@ func (cr *cowRecord) FromCsvRecord(rec []string) (CsvToDbLoader, error) {
 			res.InbrindingCoeffByFamily = &icbf
 		}
 	}
-
-	if birthDate, err := time.Parse(time.DateOnly, rec[cr.HeaderIndexes["BirthDate"]]); err != nil {
-		return nil, err
-	} else {
-		res.BirthDate = models.DateOnly{Time: birthDate}
+	if rec[cr.HeaderIndexes["BirthDate"]] != "" {
+		if birthDate, err := time.Parse(time.DateOnly, rec[cr.HeaderIndexes["BirthDate"]]); err != nil {
+			return nil, err
+		} else {
+			res.BirthDate = &models.DateOnly{Time: birthDate}
+		}
 	}
 
 	if rec[cr.HeaderIndexes["DepartDate"]] != "" {
diff --git a/server/routes/load/document.go b/server/routes/load/document.go
index 94fa798..5c8a7bc 100644
--- a/server/routes/load/document.go
+++ b/server/routes/load/document.go
@@ -3,6 +3,7 @@ package load
 import (
 	"cow_backend/models"
 	"strconv"
+	"strings"
 	"time"
 
 	"github.com/gin-gonic/gin"
@@ -16,40 +17,47 @@ func (l *Load) Document() func(*gin.Context) {
 	return func(c *gin.Context) {
 		form, err := c.MultipartForm()
 		if err != nil {
-			c.JSON(500, err)
+			c.JSON(500, err.Error())
 			return
 		}
-		document, ok := form.File["Document"]
-		if !ok || len(document) == 0 {
-			c.JSON(500, "not found field csv")
+		doc, ok := form.File["Document"]
+		if !ok {
+			c.JSON(500, "not found field Document")
 			return
 		}
 
 		now := time.Now()
-		fileName := "doc" + strconv.FormatInt(now.Unix(), 16) + "_" + strconv.FormatUint(documentUniqueIndex, 16) + document[0].Filename
-		uploadedName := DOCUMENT_PATH + fileName
-
-		if err := c.SaveUploadedFile(document[0], uploadedName); err != nil {
-			c.JSON(500, err)
-			return
+		filename := "doc_" + strconv.FormatInt(now.Unix(), 16) + "_" + strconv.FormatUint(documentUniqueIndex, 16)
+		uploadFolder := DOCUMENT_PATH + filename
+
+		filesNaming := map[string]string{}
+
+		for _, file := range doc {
+			uploadPath := uploadFolder + "/" + file.Filename
+			filesNaming[file.Filename] = filename + "/" + file.Filename
+			if err := c.SaveUploadedFile(file, uploadPath); err != nil {
+				c.JSON(500, err.Error())
+				return
+			}
 		}
-		documentUniqueIndex++
 
-		cowId, err := strconv.ParseUint(form.Value["CowID"][0], 10, 64)
-		if err != nil {
-			c.JSON(422, err.Error())
-			return
-		}
-		dbCow := models.Cow{}
 		db := models.GetDb()
-		if err := db.Preload("Documents").First(&dbCow, cowId).Error; err != nil {
-			c.JSON(422, err.Error())
-			return
-		}
-		if err := db.Model(&dbCow).Association("Documents").Append(&models.Document{Path: fileName}); err != nil {
-			c.JSON(500, err.Error())
-			return
+		errors := []string{}
+		for fileName, filePath := range filesNaming {
+			cow := models.Cow{}
+			selecs := strings.Split(fileName, ".")[0]
+			if err := db.First(&cow, map[string]any{"selecs_number": selecs}).Error; err != nil {
+				errors = append(errors, err.Error())
+				continue
+			}
+			dbDoc := models.Document{
+				CowID: cow.ID,
+				Path:  filePath,
+			}
+			if err := db.Create(&dbDoc).Error; err != nil {
+				errors = append(errors, err.Error())
+			}
 		}
-		c.JSON(200, "ok")
+		c.JSON(200, errors)
 	}
 }
diff --git a/server/routes/load/event.go b/server/routes/load/event.go
index 0c19391..1b31984 100644
--- a/server/routes/load/event.go
+++ b/server/routes/load/event.go
@@ -21,7 +21,7 @@ type eventRecord struct {
 	TypeId            uint
 	DataResourse      *string
 	DaysFromLactation uint
-	Date              models.DateOnly
+	Date              *models.DateOnly
 	Comment1          *string
 	Comment2          *string
 	HeaderIndexes     map[string]int
@@ -94,11 +94,14 @@ var eventRecordParsers = map[string]func(*eventRecord, []string) error{
 	},
 	EVENT_DATE_COL: func(evr *eventRecord, rec []string) error {
 		dateStr := rec[evr.HeaderIndexes[EVENT_DATE_COL]]
+		if dateStr == "" {
+			return nil
+		}
 		date, err := time.Parse(time.DateOnly, dateStr)
 		if err != nil {
 			return err
 		}
-		evr.Date = models.DateOnly{Time: date}
+		evr.Date = &models.DateOnly{Time: date}
 		return nil
 	},
 	EVENT_COM1_COL: func(evr *eventRecord, rec []string) error {
diff --git a/server/routes/load/exterior_data.go b/server/routes/load/exterior_data.go
new file mode 100644
index 0000000..8e931e1
--- /dev/null
+++ b/server/routes/load/exterior_data.go
@@ -0,0 +1,266 @@
+package load
+
+import (
+	"cow_backend/models"
+	"encoding/csv"
+	"errors"
+	"github.com/gin-gonic/gin"
+	"gorm.io/gorm"
+	"io"
+	"os"
+	"strconv"
+	"sync"
+	"time"
+)
+
+const EXT_ASSESSMENT_DATE_COL = "assesment_date"
+const EXT_BODY_STRUCTURE_COL = "body_structure"
+const EXT_MILK_STRENGTH_COL = "milk_strength"
+const EXT_LIMBS_COL = "limbs"
+const EXT_UDDER_COL = "udder"
+const EXT_SUCRUM_COL = "sacrum"
+const EXT_SELECS_COL = "selecs"
+const EXT_RATING = "rating"
+
+type exteriorRecord struct {
+	AssessmentDate *models.DateOnly
+	BodyStructure  *float64
+	MilkStrength   *float64
+	Limbs          *float64
+	Udder          *float64
+	Sacrum         *float64
+	Rating         float64
+	Selecs         uint64
+	HeaderIndexes  map[string]int
+}
+
+var exteriorDataParsers = map[string]func(*exteriorRecord, []string) error{
+	EXT_ASSESSMENT_DATE_COL: func(er *exteriorRecord, rec []string) error {
+		dateStr := rec[er.HeaderIndexes[EXT_ASSESSMENT_DATE_COL]]
+		if dateStr == "" {
+			return nil
+		}
+		date, err := time.Parse(time.DateOnly, dateStr)
+		if err != nil {
+			return errors.New("ошибка прасинга даты оценки: " + err.Error())
+		}
+		er.AssessmentDate = &models.DateOnly{Time: date}
+		return nil
+	},
+	EXT_BODY_STRUCTURE_COL: func(er *exteriorRecord, rec []string) error {
+		valStr := rec[er.HeaderIndexes[EXT_BODY_STRUCTURE_COL]]
+		if valStr == "" {
+			return nil
+		}
+		val, err := strconv.ParseFloat(valStr, 64)
+		if err != nil {
+			return errors.New("ошибка парсинга body_structure: " + err.Error())
+		}
+		er.BodyStructure = &val
+		return nil
+	},
+	EXT_MILK_STRENGTH_COL: func(er *exteriorRecord, rec []string) error {
+		valStr := rec[er.HeaderIndexes[EXT_MILK_STRENGTH_COL]]
+		if valStr == "" {
+			return nil
+		}
+		val, err := strconv.ParseFloat(valStr, 64)
+		if err != nil {
+			return errors.New("ошибка парсинга milk_strength: " + err.Error())
+		}
+		er.MilkStrength = &val
+		return nil
+	},
+	EXT_LIMBS_COL: func(er *exteriorRecord, rec []string) error {
+		valStr := rec[er.HeaderIndexes[EXT_LIMBS_COL]]
+		if valStr == "" {
+			return nil
+		}
+		val, err := strconv.ParseFloat(valStr, 64)
+		if err != nil {
+			return errors.New("ошибка парсинга limbs: " + err.Error())
+		}
+		er.Limbs = &val
+		return nil
+	},
+	EXT_UDDER_COL: func(er *exteriorRecord, rec []string) error {
+		valStr := rec[er.HeaderIndexes[EXT_UDDER_COL]]
+		if valStr == "" {
+			return nil
+		}
+		val, err := strconv.ParseFloat(valStr, 64)
+		if err != nil {
+			return errors.New("ошибка парсинга udder: " + err.Error())
+		}
+		er.Udder = &val
+		return nil
+	},
+	EXT_SUCRUM_COL: func(er *exteriorRecord, rec []string) error {
+		valStr := rec[er.HeaderIndexes[EXT_SUCRUM_COL]]
+		if valStr == "" {
+			return nil
+		}
+		val, err := strconv.ParseFloat(valStr, 64)
+		if err != nil {
+			return errors.New("ошибка парсинга sacrum: " + err.Error())
+		}
+		er.Sacrum = &val
+		return nil
+	},
+	EXT_SELECS_COL: func(er *exteriorRecord, rec []string) error {
+		valStr := rec[er.HeaderIndexes[EXT_SELECS_COL]]
+		if valStr == "" {
+			return errors.New("нельзя загрузить экстерьер без селекса коровы")
+		}
+		val, err := strconv.ParseUint(valStr, 10, 64)
+		if err != nil {
+			return errors.New("ошибка парсинга селекса " + err.Error())
+		}
+		er.Selecs = val
+		return nil
+	},
+	EXT_RATING: func(er *exteriorRecord, rec []string) error {
+		valStr := rec[er.HeaderIndexes[EXT_RATING]]
+		if valStr == "" {
+			return errors.New("rating - обязательная колонка")
+		}
+		val, err := strconv.ParseFloat(valStr, 64)
+		if err != nil {
+			return errors.New("ошибка парсинга рейтинга " + err.Error())
+		}
+		er.Rating = val
+		return nil
+	},
+}
+
+func newExteriorRecord(header []string) (*exteriorRecord, error) {
+	exteriorRecord := &exteriorRecord{}
+	columns := []string{
+		EXT_ASSESSMENT_DATE_COL,
+		EXT_BODY_STRUCTURE_COL,
+		EXT_MILK_STRENGTH_COL,
+		EXT_LIMBS_COL,
+		EXT_UDDER_COL,
+		EXT_SUCRUM_COL,
+		EXT_SELECS_COL,
+		EXT_RATING,
+	}
+	exteriorRecord.HeaderIndexes = make(map[string]int)
+	for i, col := range header {
+		exteriorRecord.HeaderIndexes[col] = i
+	}
+	for _, col := range columns {
+		if _, ok := exteriorRecord.HeaderIndexes[col]; !ok {
+			return nil, errors.New("не найдена колонка " + col)
+		}
+	}
+	return exteriorRecord, nil
+}
+
+func (extr *exteriorRecord) FromCsvRecord(rec []string) (CsvToDbLoader, error) {
+	for col, parser := range exteriorDataParsers {
+		if err := parser(extr, rec); err != nil {
+			return nil, errors.New("ошибка парсинга колонки " + col + " значения " + rec[extr.HeaderIndexes[col]] + ": " + err.Error())
+		}
+	}
+	return extr, nil
+}
+
+func (extr *exteriorRecord) ToDbModel(db *gorm.DB) (any, error) {
+
+	cow := models.Cow{}
+	if err := db.First(&cow, map[string]any{"selecs_number": extr.Selecs}).Error; err != nil {
+		return nil, errors.New("Не найдена корова с селексом " + strconv.FormatUint(uint64(extr.Selecs), 10))
+	}
+
+	exterior := models.Exterior{}
+	if err := db.FirstOrCreate(&exterior, map[string]any{"cow_id": cow.ID}).Error; err != nil {
+		return nil, errors.New("ошибка получения экстерьера " + err.Error())
+	}
+
+	exterior.MilkStrength = extr.MilkStrength
+	exterior.Limbs = extr.Limbs
+	exterior.Udder = extr.Udder
+	exterior.Sacrum = extr.Sacrum
+	exterior.BodyStructure = extr.BodyStructure
+	exterior.AssessmentDate = extr.AssessmentDate
+	exterior.Rating = extr.Rating
+	return exterior, nil
+}
+
+func (extr *exteriorRecord) Copy() *exteriorRecord {
+	copy := exteriorRecord{}
+	copy.HeaderIndexes = extr.HeaderIndexes
+	return &copy
+}
+
+const EXT_CSV_PATH = "./csv/exterior_data/"
+
+var exterior_unique_index = uint64(0)
+
+func (l *Load) ExteriorData() func(*gin.Context) {
+	return func(c *gin.Context) {
+		form, err := c.MultipartForm()
+		if err != nil {
+			c.JSON(500, err)
+			return
+		}
+		csvField, ok := form.File["csv"]
+		if !ok {
+			c.JSON(500, "not found field csv")
+			return
+		}
+
+		now := time.Now()
+		uploadedName := EXT_CSV_PATH + "exterior_data" + strconv.FormatInt(now.Unix(), 16) + "_" + strconv.FormatUint(exterior_unique_index, 16) + ".csv"
+		if err := c.SaveUploadedFile(csvField[0], uploadedName); err != nil {
+			c.JSON(500, err)
+			return
+		}
+		exterior_unique_index++
+
+		file, err := os.Open(uploadedName)
+		if err != nil {
+			c.JSON(500, "error opening file")
+			return
+		}
+		defer file.Close()
+		csvReader := csv.NewReader(file)
+		header, err := csvReader.Read()
+		if err != nil {
+			c.JSON(422, err.Error())
+			return
+		}
+		recordWithHeader, err := newExteriorRecord(header)
+		if err != nil {
+			c.JSON(422, err.Error())
+			return
+		}
+
+		errors := []string{}
+		errorsMtx := sync.Mutex{}
+		loaderWg := sync.WaitGroup{}
+		loadChannel := make(chan loaderData)
+		MakeLoadingPool(loadChannel, SaveRecordToDb[models.Exterior])
+		// do some database operations in the transaction (use 'tx' from this point, not 'db')
+		for record, err := csvReader.Read(); err != io.EOF; record, err = csvReader.Read() {
+			if err != nil {
+				errorsMtx.Lock()
+				errors = append(errors, err.Error())
+				errorsMtx.Unlock()
+				continue
+			}
+			loaderWg.Add(1)
+			loadChannel <- loaderData{
+				Loader:    recordWithHeader.Copy(),
+				Record:    record,
+				Errors:    &errors,
+				ErrorsMtx: &errorsMtx,
+				WaitGroup: &loaderWg,
+			}
+		}
+		loaderWg.Wait()
+		close(loadChannel)
+		c.JSON(200, errors)
+	}
+}
diff --git a/server/routes/load/generic.go b/server/routes/load/generic.go
index f73f0ae..f41e022 100644
--- a/server/routes/load/generic.go
+++ b/server/routes/load/generic.go
@@ -3,12 +3,13 @@ package load
 import (
 	"cow_backend/models"
 	"errors"
+	"log"
 	"sync"
 
 	"gorm.io/gorm"
 )
 
-const MAX_CONCURENT_LOADERS = 64
+const MAX_CONCURENT_LOADERS = 16
 
 type CsvToDbLoader interface {
 	FromCsvRecord(rec []string) (CsvToDbLoader, error)
@@ -18,20 +19,26 @@ type CsvToDbLoader interface {
 func LoadRecordToDb[modelType any](loader CsvToDbLoader, record []string) error {
 	parsed, errLoad := loader.FromCsvRecord(record)
 	if errLoad != nil {
+		log.Printf("Error loading record: %q", errLoad.Error())
 		return errLoad
 	}
 	db := models.GetDb()
 	untypedModel, errParse := parsed.ToDbModel(db)
 	if errParse != nil {
+		log.Printf("Error parsing record: %q", errParse.Error())
 		return errParse
 	}
 	typedModel, ok := untypedModel.(modelType)
 	if !ok {
 		return errors.New("wrong type provided to load record to db")
 	}
-	if err := db.Debug().Create(&typedModel).Error; err != nil {
-		return err
+	log.Printf("[INFO] starting record loading")
+	log.Printf("[INFO] TYPEDMODEL=%v", typedModel)
+	if createRes := db.Debug().Create(&typedModel); createRes.Error != nil {
+		log.Printf("Error creating record: %q", createRes.Error.Error())
+		return createRes.Error
 	}
+	log.Printf("[INFO] finishing record loading")
 
 	return nil
 }
diff --git a/server/routes/load/grade.go b/server/routes/load/grade.go
index 3ec7940..7943375 100644
--- a/server/routes/load/grade.go
+++ b/server/routes/load/grade.go
@@ -29,6 +29,23 @@ const GR_EBV_FAT_REG_COL = "evb_fatReg"
 const GR_EBV_PROTEIN_REG_COL = "ebv_proteinReg"
 const GR_EBV_INSEMENATION_REG_COL = "ebv_insemenationReg"
 const GR_EBV_SERVICE_REG_COL = "ebv_serviceReg"
+const GR_EBV_SOMATIC_NUC_REG_COL = "ebv_somaticNucReg"
+const GR_EBV_PRODUCTIVE_LONGLIVITY_COL = "ebv_productiveLongLivityReg"
+const GR_EBV_MASTIT_COL = "ebv_mastitReg"
+const GR_EBV_PROTEIN_PERCENTS_COL = "ebv_proteinPercentsReg"
+const GR_EBV_FAT_PERCENTS_COL = "ebv_fatPercentsReg"
+
+const GR_GENERAL_VALUE_REG_REL_COL = "GeneralValueReg_rel"
+const GR_EBV_MILK_REG_REL_COL = "ebv_milkReg_rel"
+const GR_EBV_FAT_REG_REL_COL = "ebv_fatReg_rel"
+const GR_EBV_PROTEIN_REG_REL_COL = "ebv_proteinReg_rel"
+const GR_EBV_INSEMENATION_REG_REL_COL = "ebv_insemenationReg_rel"
+const GR_EBV_SERVICE_REG_REL_COL = "ebv_serviceReg_rel"
+const GR_EBV_SOMATIC_NUC_REG_REL_COL = "ebv_somaticNucReg_rel"
+const GR_EBV_PRODUCTIVE_LONGLIVITY_REG_REL_COL = "ebv_productiveLongLivityReg_rel"
+const GR_EBV_MASTIT_REG_REL_COL = "ebv_mastitReg_rel"
+const GR_EBV_PROTEIN_PERCENTS_REG_REL_COL = "ebv_proteinPercentsReg_rel"
+const GR_EBV_FAT_PERCENTS_REG_REL_COL = "ebv_fatPercentsReg_rel"
 
 type gradeRecord struct {
 	CowSelecs uint
@@ -42,15 +59,34 @@ type gradeRecord struct {
 	EbvProteinHoz *float64
 	EbvProteinReg *float64
 
-	EbvInsemenationHoz *float64
-	EbvInsemenationReg *float64
+	EbvInsemenationHoz    *float64
+	EbvInsemenationReg    *float64
+	EbvInsemenationRegRel *float64
 
-	EbvServiceHoz *float64
-	EbvServiceReg *float64
+	EbvServiceHoz    *float64
+	EbvServiceReg    *float64
+	EbvServiceRegRel *float64
 
 	GeneralValueHoz *float64
 	GeneralValueReg *float64
 	HeaderIndexes   map[string]int
+
+	EbvSomaticNucsReg         *float64
+	EbvProductiveLongevityReg *float64
+	EbvMastitReg              *float64
+	EbvProteinPercentsReg     *float64
+	EbvFatPercentsReg         *float64
+
+	EbvSomaticNucsRegRel         *float64
+	EbvProductiveLongevityRegRel *float64
+	EbvMastitRegRel              *float64
+	EbvProteinPercentsRegRel     *float64
+	EbvFatPercentsRegRel         *float64
+
+	GeneralValueRegRel *float64
+	EbvMilkRegRel      *float64
+	EbvFatRegRel       *float64
+	EbvProteinRegRel   *float64
 }
 
 var gradeRecordParsers = map[string]func(*gradeRecord, []string) error{
@@ -187,7 +223,7 @@ var gradeRecordParsers = map[string]func(*gradeRecord, []string) error{
 		return nil
 	},
 	GR_EBV_INSEMENATION_REG_COL: func(gr *gradeRecord, rec []string) error {
-		ebvValue := rec[gr.HeaderIndexes[GR_EBV_PROTEIN_REG_COL]]
+		ebvValue := rec[gr.HeaderIndexes[GR_EBV_INSEMENATION_REG_COL]]
 		if ebvValue == "" {
 			gr.EbvInsemenationReg = nil
 			return nil
@@ -226,6 +262,225 @@ var gradeRecordParsers = map[string]func(*gradeRecord, []string) error{
 		gr.EbvServiceReg = &ebvFloat
 		return nil
 	},
+	GR_EBV_MILK_REG_REL_COL: func(gr *gradeRecord, rec []string) error {
+		milkRel := rec[gr.HeaderIndexes[GR_EBV_MILK_REG_REL_COL]]
+		if milkRel == "" {
+			gr.EbvMilkRegRel = nil
+			return nil
+		}
+		milkRelFloat, err := strconv.ParseFloat(milkRel, 64)
+		if err != nil {
+			return errors.New("не удалось распарсить general value hoz = " + milkRel + " " + err.Error())
+		}
+		gr.EbvMilkRegRel = &milkRelFloat
+		return nil
+	},
+	GR_EBV_FAT_REG_REL_COL: func(gr *gradeRecord, rec []string) error {
+		fatRel := rec[gr.HeaderIndexes[GR_EBV_FAT_REG_REL_COL]]
+		if fatRel == "" {
+			gr.EbvFatRegRel = nil
+			return nil
+		}
+		fatRelFloat, err := strconv.ParseFloat(fatRel, 64)
+		if err != nil {
+			return errors.New("не удалось распарсить general value hoz = " + fatRel + " " + err.Error())
+		}
+		gr.EbvFatRegRel = &fatRelFloat
+		return nil
+	},
+	GR_EBV_PROTEIN_REG_REL_COL: func(gr *gradeRecord, rec []string) error {
+		proteinRel := rec[gr.HeaderIndexes[GR_EBV_PROTEIN_REG_REL_COL]]
+		if proteinRel == "" {
+			gr.EbvProteinRegRel = nil
+			return nil
+		}
+		proteinRelFloat, err := strconv.ParseFloat(proteinRel, 64)
+		if err != nil {
+			return errors.New("не удалось распарсить general value hoz = " + proteinRel + " " + err.Error())
+		}
+		gr.EbvProteinRegRel = &proteinRelFloat
+		return nil
+	},
+
+	GR_GENERAL_VALUE_REG_REL_COL: func(gr *gradeRecord, rec []string) error {
+		strVal := rec[gr.HeaderIndexes[GR_GENERAL_VALUE_REG_REL_COL]]
+		if strVal == "" {
+			gr.GeneralValueRegRel = nil
+			return nil
+		}
+		floatVal, err := strconv.ParseFloat(strVal, 64)
+		if err != nil {
+			return errors.New("не удалось распарсить колонку " + GR_GENERAL_VALUE_REG_REL_COL + "значение: " + strVal)
+		}
+		gr.GeneralValueRegRel = &floatVal
+		return nil
+	},
+
+	GR_EBV_SOMATIC_NUC_REG_COL: func(gr *gradeRecord, rec []string) error {
+		strVal := rec[gr.HeaderIndexes[GR_EBV_SOMATIC_NUC_REG_COL]]
+		if strVal == "" {
+			gr.EbvSomaticNucsReg = nil
+			return nil
+		}
+		floatVal, err := strconv.ParseFloat(strVal, 64)
+		if err != nil {
+			return errors.New("не удалось распарсить колонку " + GR_EBV_SOMATIC_NUC_REG_COL + "значение: " + strVal)
+		}
+		gr.EbvSomaticNucsReg = &floatVal
+		return nil
+	},
+
+	GR_EBV_SOMATIC_NUC_REG_REL_COL: func(gr *gradeRecord, rec []string) error {
+		strVal := rec[gr.HeaderIndexes[GR_EBV_SOMATIC_NUC_REG_REL_COL]]
+		if strVal == "" {
+			gr.EbvSomaticNucsRegRel = nil
+			return nil
+		}
+		floatVal, err := strconv.ParseFloat(strVal, 64)
+		if err != nil {
+			return errors.New("не удалось распарсить колонку " + GR_EBV_SOMATIC_NUC_REG_REL_COL + "значение: " + strVal)
+		}
+		gr.EbvSomaticNucsRegRel = &floatVal
+		return nil
+	},
+
+	GR_EBV_PRODUCTIVE_LONGLIVITY_COL: func(gr *gradeRecord, rec []string) error {
+		strVal := rec[gr.HeaderIndexes[GR_EBV_PRODUCTIVE_LONGLIVITY_COL]]
+		if strVal == "" {
+			gr.EbvProductiveLongevityReg = nil
+			return nil
+		}
+		floatVal, err := strconv.ParseFloat(strVal, 64)
+		if err != nil {
+			return errors.New("не удалось распарсить колонку " + GR_EBV_PRODUCTIVE_LONGLIVITY_COL + "значение: " + strVal)
+		}
+		gr.EbvProductiveLongevityReg = &floatVal
+		return nil
+	},
+
+	GR_EBV_PRODUCTIVE_LONGLIVITY_REG_REL_COL: func(gr *gradeRecord, rec []string) error {
+		strVal := rec[gr.HeaderIndexes[GR_EBV_PRODUCTIVE_LONGLIVITY_REG_REL_COL]]
+		if strVal == "" {
+			gr.EbvProductiveLongevityRegRel = nil
+			return nil
+		}
+		floatVal, err := strconv.ParseFloat(strVal, 64)
+		if err != nil {
+			return errors.New("не удалось распарсить колонку " + GR_EBV_PRODUCTIVE_LONGLIVITY_REG_REL_COL + "значение: " + strVal)
+		}
+		gr.EbvProductiveLongevityRegRel = &floatVal
+		return nil
+	},
+
+	GR_EBV_MASTIT_COL: func(gr *gradeRecord, rec []string) error {
+		strVal := rec[gr.HeaderIndexes[GR_EBV_MASTIT_COL]]
+		if strVal == "" {
+			gr.EbvMastitReg = nil
+			return nil
+		}
+		floatVal, err := strconv.ParseFloat(strVal, 64)
+		if err != nil {
+			return errors.New("не удалось распарсить колонку " + GR_EBV_MASTIT_COL + "значение: " + strVal)
+		}
+		gr.EbvMastitReg = &floatVal
+		return nil
+	},
+
+	GR_EBV_MASTIT_REG_REL_COL: func(gr *gradeRecord, rec []string) error {
+		strVal := rec[gr.HeaderIndexes[GR_EBV_MASTIT_REG_REL_COL]]
+		if strVal == "" {
+			gr.EbvMastitRegRel = nil
+			return nil
+		}
+		floatVal, err := strconv.ParseFloat(strVal, 64)
+		if err != nil {
+			return errors.New("не удалось распарсить колонку " + GR_EBV_MASTIT_REG_REL_COL + "значение: " + strVal)
+		}
+		gr.EbvMastitRegRel = &floatVal
+		return nil
+	},
+
+	GR_EBV_SERVICE_REG_REL_COL: func(gr *gradeRecord, rec []string) error {
+		strVal := rec[gr.HeaderIndexes[GR_EBV_SERVICE_REG_REL_COL]]
+		if strVal == "" {
+			gr.EbvServiceRegRel = nil
+			return nil
+		}
+		floatVal, err := strconv.ParseFloat(strVal, 64)
+		if err != nil {
+			return errors.New("не удалось распарсить колонку " + GR_EBV_SERVICE_REG_REL_COL + "значение: " + strVal)
+		}
+		gr.EbvServiceRegRel = &floatVal
+		return nil
+	},
+
+	GR_EBV_INSEMENATION_REG_REL_COL: func(gr *gradeRecord, rec []string) error {
+		strVal := rec[gr.HeaderIndexes[GR_EBV_INSEMENATION_REG_REL_COL]]
+		if strVal == "" {
+			gr.EbvInsemenationRegRel = nil
+			return nil
+		}
+		floatVal, err := strconv.ParseFloat(strVal, 64)
+		if err != nil {
+			return errors.New("не удалось распарсить колонку " + GR_EBV_INSEMENATION_REG_REL_COL + "значение: " + strVal)
+		}
+		gr.EbvInsemenationRegRel = &floatVal
+		return nil
+	},
+
+	GR_EBV_PROTEIN_PERCENTS_COL: func(gr *gradeRecord, rec []string) error {
+		strVal := rec[gr.HeaderIndexes[GR_EBV_PROTEIN_PERCENTS_COL]]
+		if strVal == "" {
+			gr.EbvProteinPercentsReg = nil
+			return nil
+		}
+		floatVal, err := strconv.ParseFloat(strVal, 64)
+		if err != nil {
+			return errors.New("не удалось распарсить колонку " + GR_EBV_PROTEIN_PERCENTS_COL + "значение: " + strVal)
+		}
+		gr.EbvProteinPercentsReg = &floatVal
+		return nil
+	},
+	GR_EBV_PROTEIN_PERCENTS_REG_REL_COL: func(gr *gradeRecord, rec []string) error {
+		strVal := rec[gr.HeaderIndexes[GR_EBV_PROTEIN_PERCENTS_REG_REL_COL]]
+		if strVal == "" {
+			gr.EbvProteinPercentsRegRel = nil
+			return nil
+		}
+		floatVal, err := strconv.ParseFloat(strVal, 64)
+		if err != nil {
+			return errors.New("не удалось распарсить колонку " + GR_EBV_PROTEIN_PERCENTS_REG_REL_COL + "значение: " + strVal)
+		}
+		gr.EbvProteinPercentsRegRel = &floatVal
+		return nil
+	},
+
+	GR_EBV_FAT_PERCENTS_COL: func(gr *gradeRecord, rec []string) error {
+		strVal := rec[gr.HeaderIndexes[GR_EBV_FAT_PERCENTS_COL]]
+		if strVal == "" {
+			gr.EbvFatPercentsReg = nil
+			return nil
+		}
+		floatVal, err := strconv.ParseFloat(strVal, 64)
+		if err != nil {
+			return errors.New("не удалось распарсить колонку " + GR_EBV_FAT_PERCENTS_COL + "значение: " + strVal)
+		}
+		gr.EbvFatPercentsReg = &floatVal
+		return nil
+	},
+	GR_EBV_FAT_PERCENTS_REG_REL_COL: func(gr *gradeRecord, rec []string) error {
+		strVal := rec[gr.HeaderIndexes[GR_EBV_FAT_PERCENTS_REG_REL_COL]]
+		if strVal == "" {
+			gr.EbvFatPercentsRegRel = nil
+			return nil
+		}
+		floatVal, err := strconv.ParseFloat(strVal, 64)
+		if err != nil {
+			return errors.New("не удалось распарсить колонку " + GR_EBV_FAT_PERCENTS_REG_REL_COL + "значение: " + strVal)
+		}
+		gr.EbvFatPercentsRegRel = &floatVal
+		return nil
+	},
 }
 
 func NewGradeRecord(header []string) (*gradeRecord, error) {
@@ -246,6 +501,23 @@ func NewGradeRecord(header []string) (*gradeRecord, error) {
 		GR_EBV_PROTEIN_REG_COL,
 		GR_EBV_INSEMENATION_REG_COL,
 		GR_EBV_SERVICE_REG_COL,
+		GR_EBV_SOMATIC_NUC_REG_COL,
+		GR_EBV_PRODUCTIVE_LONGLIVITY_COL,
+		GR_EBV_MASTIT_COL,
+		GR_EBV_PROTEIN_PERCENTS_COL,
+		GR_EBV_FAT_PERCENTS_COL,
+
+		GR_GENERAL_VALUE_REG_REL_COL,
+		GR_EBV_MILK_REG_REL_COL,
+		GR_EBV_FAT_REG_REL_COL,
+		GR_EBV_PROTEIN_REG_REL_COL,
+		GR_EBV_INSEMENATION_REG_REL_COL,
+		GR_EBV_SERVICE_REG_REL_COL,
+		GR_EBV_SOMATIC_NUC_REG_REL_COL,
+		GR_EBV_PRODUCTIVE_LONGLIVITY_REG_REL_COL,
+		GR_EBV_MASTIT_REG_REL_COL,
+		GR_EBV_PROTEIN_PERCENTS_REG_REL_COL,
+		GR_EBV_FAT_PERCENTS_REG_REL_COL,
 	}
 	gr.HeaderIndexes = make(map[string]int)
 	for idx, col := range header {
@@ -283,26 +555,41 @@ func (gr *gradeRecord) ToDbModel(tx *gorm.DB) (any, error) {
 		return nil, errors.New("Для коровы с селексом " + strconv.FormatUint(uint64(gr.CowSelecs), 10) + " Уже существует оценка по региону")
 	}
 
-	grCow.GradeHoz = new(models.Grade)
-	grCow.GradeRegion = new(models.Grade)
+	grCow.GradeHoz = new(models.GradeHoz)
+	grCow.GradeRegion = new(models.GradeRegion)
+	grCow.GradeCountry = new(models.GradeCountry)
 
 	grCow.GradeHoz.EbvFat = gr.EbvFatHoz
-	grCow.GradeRegion.EbvFat = gr.EbvFatReg
-
 	grCow.GradeHoz.EbvInsemenation = gr.EbvInsemenationHoz
-	grCow.GradeRegion.EbvInsemenation = gr.EbvInsemenationReg
-
 	grCow.GradeHoz.EbvMilk = gr.EbvMilkHoz
-	grCow.GradeRegion.EbvMilk = gr.EbvMilkReg
-
 	grCow.GradeHoz.EbvProtein = gr.EbvProteinHoz
-	grCow.GradeRegion.EbvProtein = gr.EbvProteinReg
+	grCow.GradeHoz.EbvService = gr.EbvServiceHoz
+	grCow.GradeHoz.GeneralValue = gr.GeneralValueHoz
 
-	grCow.GradeHoz.EvbService = gr.EbvServiceHoz
-	grCow.GradeRegion.EvbService = gr.EbvServiceReg
+	grCow.GradeRegion.GeneralValueReliability = gr.GeneralValueRegRel
+	grCow.GradeRegion.EbvFatReliability = gr.EbvFatRegRel
+	grCow.GradeRegion.EbvMilkReliability = gr.EbvMilkRegRel
+	grCow.GradeRegion.EbvProteinReliability = gr.EbvProteinRegRel
+	grCow.GradeRegion.EbvSomaticNucsReliability = gr.EbvSomaticNucsRegRel
+	grCow.GradeRegion.EbvProductiveLongevityReliability = gr.EbvProductiveLongevityRegRel
+	grCow.GradeRegion.EbvMastitReliability = gr.EbvMastitRegRel
+	grCow.GradeRegion.EbvServiceReliability = gr.EbvServiceRegRel
+	grCow.GradeRegion.EbvInsemenationReliability = gr.EbvInsemenationRegRel
+	grCow.GradeRegion.EbvProteinPercentsReliability = gr.EbvProteinPercentsRegRel
+	grCow.GradeRegion.EbvFatPercentsReliability = gr.EbvFatPercentsRegRel
 
-	grCow.GradeHoz.GeneralValue = gr.GeneralValueHoz
 	grCow.GradeRegion.GeneralValue = gr.GeneralValueReg
+	grCow.GradeRegion.EbvService = gr.EbvServiceReg
+	grCow.GradeRegion.EbvProductiveLongevity = gr.EbvProductiveLongevityReg
+	grCow.GradeRegion.EbvFat = gr.EbvFatReg
+	grCow.GradeRegion.EbvInsemenation = gr.EbvInsemenationReg
+	grCow.GradeRegion.EbvMilk = gr.EbvMilkReg
+	grCow.GradeRegion.EbvProtein = gr.EbvProteinReg
+	grCow.GradeRegion.EbvSomaticNucs = gr.EbvSomaticNucsReg
+	grCow.GradeRegion.EbvMastit = gr.EbvMastitReg
+	grCow.GradeRegion.EbvProteinPercents = gr.EbvProteinPercentsReg
+	grCow.GradeRegion.EbvFatPercents = gr.EbvFatPercentsReg
+
 	return grCow, nil
 }
 
diff --git a/server/routes/load/gtcFile.go b/server/routes/load/gtcFile.go
index e348326..e1f36a7 100644
--- a/server/routes/load/gtcFile.go
+++ b/server/routes/load/gtcFile.go
@@ -2,14 +2,11 @@ package load
 
 import (
 	"cow_backend/models"
-	"encoding/csv"
-	"io"
-	"os"
 	"strconv"
+	"strings"
 	"time"
 
 	"github.com/gin-gonic/gin"
-	"gorm.io/gorm"
 )
 
 const GTC_FILE_PATH = "./static/gtc/"
@@ -18,6 +15,7 @@ var gtcUniqueIndex uint64 = 0
 
 func (l *Load) GtcFile() func(*gin.Context) {
 	return func(c *gin.Context) {
+
 		form, err := c.MultipartForm()
 		if err != nil {
 			c.JSON(500, err.Error())
@@ -44,42 +42,23 @@ func (l *Load) GtcFile() func(*gin.Context) {
 			}
 		}
 
-		csvFile := form.File["csv"]
-		csvFilePath := "./csv/gtcCsv" + strconv.FormatInt(now.Unix(), 16) + "_" + strconv.FormatUint(gtcUniqueIndex, 16) + ".csv"
-		if err := c.SaveUploadedFile(csvFile[0], csvFilePath); err != nil {
-			c.JSON(500, err.Error())
-		}
-
-		file, err := os.Open(csvFilePath)
-		if err != nil {
-			c.JSON(500, "error opening file")
-			return
-		}
-		defer file.Close()
-		csvReader := csv.NewReader(file)
+		db := models.GetDb()
 		errors := []string{}
-		for record, err := csvReader.Read(); err != io.EOF; record, err = csvReader.Read() {
-			selecsStr := record[0]
-			fileName := record[1]
-			filePath, ok := filesNaming[fileName]
-			if !ok {
-				errors = append(errors, "не загружен файл "+fileName)
+		for fileName, filePath := range filesNaming {
+			cow := models.Cow{}
+			selecs := strings.Split(fileName, ".")[0]
+			if err := db.First(&cow, map[string]any{"selecs_number": selecs}).Error; err != nil {
+				errors = append(errors, err.Error())
 				continue
 			}
-			dbCow := models.Cow{}
-			db := models.GetDb()
-			if err := db.Preload("Genetic").First(&dbCow, map[string]any{"selecs_number": selecsStr}).Error; err != nil {
-				errors = append(errors, "не удалось найти корову с селексом "+selecsStr)
+			genetic := models.Genetic{}
+			if err := db.FirstOrCreate(&genetic, map[string]any{"cow_id": cow.ID}).Error; err != nil {
+				errors = append(errors, err.Error())
 				continue
 			}
-			if dbCow.Genetic == nil {
-				dbCow.Genetic = new(models.Genetic)
-				dbCow.Genetic.ResultDate = &models.DateOnly{Time: time.Now().UTC()}
-				dbCow.Genetic.BloodDate = &models.DateOnly{Time: time.Now().UTC()}
-			}
-			dbCow.Genetic.GtcFilePath = &filePath
+			genetic.GtcFilePath = &filePath
 
-			if err := db.Session(&gorm.Session{FullSaveAssociations: true}).Updates(&dbCow).Error; err != nil {
+			if err := db.Save(&genetic).Error; err != nil {
 				errors = append(errors, err.Error())
 				continue
 			}
diff --git a/server/routes/load/lactation.go b/server/routes/load/lactation.go
index 3d16bd7..18a62da 100644
--- a/server/routes/load/lactation.go
+++ b/server/routes/load/lactation.go
@@ -5,6 +5,7 @@ import (
 	"encoding/csv"
 	"errors"
 	"io"
+	"log"
 	"os"
 	"strconv"
 	"sync"
@@ -282,14 +283,20 @@ func (lr *lactationRecord) FromCsvRecord(rec []string) (CsvToDbLoader, error) {
 }
 
 func (lr *lactationRecord) ToDbModel(tx *gorm.DB) (any, error) {
+	//return nil, errors.New("преобразование в модель БД отключено")
 	cow := models.Cow{}
-	if err := tx.First(&cow, map[string]any{"selecs_number": lr.CowSelecs}).Error; err != nil {
+	db := models.GetDb()
+	if err := db.First(&cow, map[string]any{"selecs_number": lr.CowSelecs}).Error; err != nil {
+		log.Printf("ошибка поиска коровы: %q", err.Error())
 		return nil, errors.New("Не найдена корова с селексом " + strconv.FormatUint(uint64(lr.CowSelecs), 10))
 	}
 	lactationCount := int64(0)
-	tx.Model(models.Lactation{}).Where(map[string]any{"cow_id": cow.ID, "number": lr.Number}).Count(&lactationCount)
+	if err := db.Model(&models.Lactation{}).Where(map[string]any{"cow_id": cow.ID, "number": lr.Number}).Count(&lactationCount).Error; err != nil {
+		log.Printf("Произошла ошибка при поиске лактаций: %q", err.Error())
+		return nil, err
+	}
 	if lactationCount != 0 {
-		return nil, errors.New("Лактация с номером" + strconv.FormatUint(uint64(lr.Number), 10) + "коровы с селексом " + strconv.FormatUint(uint64(lr.CowSelecs), 10))
+		return nil, errors.New("Лактация с номером " + strconv.FormatUint(uint64(lr.Number), 10) + " коровы с селексом " + strconv.FormatUint(uint64(lr.CowSelecs), 10) + " уже существует")
 	}
 
 	lac := models.Lactation{
@@ -361,12 +368,13 @@ func (l *Load) Lactation() func(*gin.Context) {
 		loaderWg := sync.WaitGroup{}
 		loadChannel := make(chan loaderData)
 		MakeLoadingPool(loadChannel, LoadRecordToDb[models.Lactation])
-
+		log.Printf("[INFO] START PARSING CSV FILE")
 		// do some database operations in the transaction (use 'tx' from this point, not 'db')
 		for record, err := csvReader.Read(); err != io.EOF; record, err = csvReader.Read() {
 			if err != nil {
 				errorsMtx.Lock()
 				errors = append(errors, err.Error())
+				log.Printf("[ERROR] PARSING FILE %q", err.Error())
 				errorsMtx.Unlock()
 				continue
 			}
@@ -379,6 +387,7 @@ func (l *Load) Lactation() func(*gin.Context) {
 				WaitGroup: &loaderWg,
 			}
 		}
+		log.Printf("[INFO] LOADED ALL DATA FROM CSV TO PROCESSING CHANNEL")
 		loaderWg.Wait()
 		close(loadChannel)
 		c.JSON(200, errors)
diff --git a/server/routes/load/load.go b/server/routes/load/load.go
index 59c551d..4deb824 100644
--- a/server/routes/load/load.go
+++ b/server/routes/load/load.go
@@ -18,4 +18,5 @@ func (s *Load) WriteRoutes(rg *gin.RouterGroup) {
 	apiGroup.POST("/partner", s.Partner())
 	apiGroup.POST("/gtcFile", s.GtcFile())
 	apiGroup.POST("/document", s.Document())
+	apiGroup.POST("/exteriorData", s.ExteriorData())
 }
diff --git a/server/routes/regions/frams.go b/server/routes/regions/frams.go
index 308587e..c298db1 100644
--- a/server/routes/regions/frams.go
+++ b/server/routes/regions/frams.go
@@ -11,7 +11,7 @@ import (
 //	@Summary      Get farm by region id
 //	@Description  Возращает все фермы в регионе (Данные представлены как словарь с единственным ключем "farms")
 //
-// @Tags         Regions
+// @Tags         zzDeprecated
 // @Param        id    path     int  true  "id of region"
 // @Produce      json
 // @Success      200  {array}   models.Farm
diff --git a/server/routes/user/user.go b/server/routes/user/user.go
index 9c06a3f..a0bf961 100644
--- a/server/routes/user/user.go
+++ b/server/routes/user/user.go
@@ -1,6 +1,9 @@
 package user_create
 
-import "github.com/gin-gonic/gin"
+import (
+	"cow_backend/routes/auth"
+	"github.com/gin-gonic/gin"
+)
 
 type User struct {
 }
@@ -9,4 +12,6 @@ func (s *User) WriteRoutes(rg *gin.RouterGroup) {
 	apiGroup := rg.Group("/user")
 	apiGroup.POST("/create", s.Create())
 	apiGroup.GET("/verifyEmail", s.VerifyEmail())
+	apiGroup.Use(auth.AuthMiddleware(auth.Farmer, auth.FederalOff, auth.RegionalOff, auth.Admin))
+	apiGroup.GET("/whoami", s.Whoami())
 }
diff --git a/server/routes/user/whoami.go b/server/routes/user/whoami.go
new file mode 100644
index 0000000..5926aba
--- /dev/null
+++ b/server/routes/user/whoami.go
@@ -0,0 +1,32 @@
+package user_create
+
+import (
+	"cow_backend/models"
+	"github.com/gin-gonic/gin"
+)
+
+// Whoami
+// @Summary      Получить информацию о пользователе
+// @Description  Рут вернет данные о пользователе из БД
+// @Tags         User
+// @Produce      json
+// @Success      200  {object}   string
+// @Failure      500  {object}  string
+// @Failure      401  {object}  string
+// @Router       /user/whoami [get]
+func (u *User) Whoami() func(*gin.Context) {
+	return func(c *gin.Context) {
+		userId, ok := c.Get("UserId")
+		if !ok {
+			c.JSON(401, "Юля, пожалуйста почини токен!")
+			return
+		}
+		db := models.GetDb()
+		user := models.User{}
+		if err := db.Preload("Role").First(&user, userId).Error; err != nil {
+			c.JSON(500, err.Error())
+			return
+		}
+		c.JSON(200, user)
+	}
+}
diff --git a/server/server.go b/server/server.go
index efcee08..94f92da 100644
--- a/server/server.go
+++ b/server/server.go
@@ -56,7 +56,7 @@ func seq(start, end int) []int {
 // @license.name  Apache 2.0
 // @license.url   http://www.apache.org/licenses/LICENSE-2.0.html
 
-// @host      genmilk.ru
+// @host      83.69.249.5
 // @BasePath  /api
 
 // @securityDefinitions.basic  BasicAuth
diff --git a/server/templates/DocumentLoadPage.tmpl b/server/templates/DocumentLoadPage.tmpl
index 96cb3d2..b6224b5 100644
--- a/server/templates/DocumentLoadPage.tmpl
+++ b/server/templates/DocumentLoadPage.tmpl
@@ -84,11 +84,8 @@
     <div class="form-example">
         <h1>Загрузка коровы</h1>
         <form action="/api/load/document" method="post" enctype="multipart/form-data">
-            <label for="Document">Выберите файл:</label>
-            <input type="file" id="Document" name="Document" required>
-
-            <label for="CowID">ID коровы:</label>
-            <input type="text" id="CowID" name="CowID" required>
+            <label for="Document">Выберите файлы:</label>
+            <input type="file" id="Document" name="Document" multiple required>
 
             <input type="submit" value="Загрузить">
         </form>
diff --git a/server/templates/ExteriorDataLoadPage.tmpl b/server/templates/ExteriorDataLoadPage.tmpl
new file mode 100644
index 0000000..8e92f4c
--- /dev/null
+++ b/server/templates/ExteriorDataLoadPage.tmpl
@@ -0,0 +1,94 @@
+{{ define "ExteriorDataLoadPage.tmpl"}}
+<!DOCTYPE html>
+<html lang="ru">
+<head> 
+    <meta charset="UTF-8">
+    <meta name="viewport" content="width=device-width, initial-scale=1.0">
+    <title>{{.title}}</title>
+    <style>
+        body {
+            font-family: Arial, sans-serif;
+            background-color: #f4f4f4;
+            margin: 0;
+            padding: 20px;
+            display: flex;
+            justify-content: center;
+            align-items: center;
+            height: 100vh;
+            position: relative;
+        }
+
+        h1 {
+            text-align: center;
+            color: #333;
+            margin-bottom: 20px;
+        }
+
+        .form-example {
+            background-color: #fff;
+            border-radius: 8px;
+            padding: 20px;
+            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
+            max-width: 400px;
+            width: 100%;
+        }
+
+        label {
+            display: block;
+            margin-bottom: 10px;
+            font-weight: bold;
+            color: #555;
+        }
+
+        input[type="file"] {
+            display: block;
+            margin-bottom: 20px;
+        }
+
+        input[type="submit"] {
+            background-color: #6f42c1; /* Светло-фиолетовый цвет */
+            color: white;
+            border: none;
+            padding: 10px 15px;
+            border-radius: 5px;
+            cursor: pointer;
+            transition: background-color 0.3s ease;
+            font-size: 16px;
+            width: 100%;
+        }
+
+        input[type="submit"]:hover {
+            background-color: #5a32a3; /* Темнее фиолетового при наведении */
+        }
+
+        .back-button {
+            position: absolute;
+            top: 20px;
+            left: 20px;
+            background-color: #e0c6f2; /* Светлый оттенок фиолетового */
+            color: #333;
+            border: none;
+            padding: 8px 12px;
+            border-radius: 5px;
+            cursor: pointer;
+            font-size: 16px;
+        }
+
+        .back-button:hover {
+            background-color: #d1b7e3; /* Темнее фиолетового при наведении */
+        }
+    </style>
+</head>
+<body>
+    <button class="back-button" onclick="window.history.back();">Назад</button>
+    <div class="form-example">
+        <h1>Загрузка данных экстерьера</h1>
+        <form action="/api/load/exteriorData" method="post" enctype="multipart/form-data">
+            <label for="csv">Выберите файл:</label>
+            <input type="file" id="csv" name="csv" required>
+            <input type="submit" value="Загрузить">
+        </form>
+    </div>
+</body>
+</html>
+{{ end }}
\ No newline at end of file
diff --git a/server/templates/Index.tmpl b/server/templates/Index.tmpl
index d1a373f..b35069e 100644
--- a/server/templates/Index.tmpl
+++ b/server/templates/Index.tmpl
@@ -111,6 +111,11 @@
             <button class="UserChoiseButton" type="submit">Загрузка документа</button> 
         </form>
     </div>
+    <div class="UserChoise">
+        <form action="/api/gui/exteriorDataLoad">
+            <button class="UserChoiseButton" type="submit">Загрузка данных экстерьера</button>
+        </form>
+    </div>
 </body>
 </html>
 {{ end }}
\ No newline at end of file
diff --git a/server/templates/PartnerLoadPage.tmpl b/server/templates/PartnerLoadPage.tmpl
index facf384..e4b99cd 100644
--- a/server/templates/PartnerLoadPage.tmpl
+++ b/server/templates/PartnerLoadPage.tmpl
@@ -97,11 +97,11 @@
             <label for="Phone">Phone</label>
             <input type="text" id="Phone" name="Phone" required>
 
-            <label for="Email">Phone</label>
+            <label for="Email">Email</label>
             <input type="text" id="Email" name="Email" required>
 
 
-            <label for="Description">Phone</label>
+            <label for="Description">Description</label>
             <input type="text" id="Description" name="Description" required>
 
             <label for="Logo">Выберите файл:</label>
